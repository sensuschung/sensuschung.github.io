{"title":"monad概览","uid":"91e055873403cea6328235d978a7166d","slug":"monad概览","date":"2024-06-03T13:18:00.000Z","updated":"2024-07-23T13:30:58.636Z","comments":true,"path":"api/articles/monad概览.json","keywords":null,"cover":null,"content":"<h1 id=\"基本概念\">基本概念</h1>\r\n<ul>\r\n<li><code>m</code>类型构造子</li>\r\n<li><code>return :: a -&gt; M a</code>：（也叫做<code>unit</code>），接受一个类型<code>a</code>的值，把它们包装成使用这个类型构造子建造的类型<code>m a</code>的“单子值”</li>\r\n<li><code>bind :: (M a) -&gt; (a -&gt; M b) -&gt; (M b)</code>\r\n：也可写作\r\n<code>&gt;&gt;=</code>，接受一个在类型<code>a</code>上的函数<code>f</code>，并应用<code>f</code>于去包装的值<code>a</code>，转变单体值<code>m a</code>。</li>\r\n</ul>\r\n<p>通过以上元素，复合出一个函数调用的序列，在一个表达式中通过一些<strong>bind算子</strong>把它们链接起来。</p>\r\n<p>每个函数调用<u>转变</u>它的输入普通类型值，而bind算子<u>处理返回的单子值</u>，它被填入到序列中下一个步骤。</p>\r\n<h2 id=\"示例\">示例</h2>\r\n<p>案例：maybe</p>\r\n<ul>\r\n<li>需要显示定义函数的返回状态：<code>Just ⌑result⌑</code>, or\r\n<code>Nothing</code></li>\r\n</ul>\r\n<p>案例：</p>\r\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">divide</span>(x: Decimal, y: Decimal) <span class=\"punctuation\">-&gt;</span> Maybe&lt;Decimal&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> y == <span class=\"number\">0</span> &#123; <span class=\"keyword\">return</span> Nothing &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Just</span>(x / y) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// divide(1.0, 4.0) -&gt; returns Just(0.25)</span></span><br><span class=\"line\"><span class=\"comment\">// divide(3.0, 0.0) -&gt; returns Nothing</span></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>检查<code>Maybe</code>算子返回的值(上)或使用类型匹配（下）</li>\r\n</ul>\r\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">m_x</span> = <span class=\"title function_ invoke__\">divide</span>(<span class=\"number\">3.14</span>, <span class=\"number\">0.0</span>); <span class=\"comment\">// see divide function above</span></span><br><span class=\"line\"><span class=\"comment\">// The if statement extracts x from m_x if m_x is the Just variant of Maybe</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">Just</span>(x) = m_x &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;answer: &quot;</span>, x)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;division failed, divide by zero error...&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">result</span> = <span class=\"title function_ invoke__\">divide</span>(<span class=\"number\">3.0</span>, <span class=\"number\">2.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">match</span> result &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Just</span>(x) =&gt; <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;Answer: &quot;</span>, x),</span><br><span class=\"line\">    Nothing =&gt; <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;division failed; we&#x27;ll get &#x27;em next time.&quot;</span>),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>多输入monad，单输出monad</li>\r\n</ul>\r\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">chainable_division</span>(maybe_x: Maybe&lt;Decimal&gt;, maybe_y: Maybe&lt;Decimal&gt;) <span class=\"punctuation\">-&gt;</span> Maybe&lt;Decimal&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">match</span> (maybe_x, maybe_y) &#123;</span><br><span class=\"line\">        (<span class=\"title function_ invoke__\">Just</span>(x), <span class=\"title function_ invoke__\">Just</span>(y)) =&gt; &#123; <span class=\"comment\">// If both inputs are Just, check for division by zero and divide accordingly</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> y == <span class=\"number\">0</span> &#123; <span class=\"keyword\">return</span> Nothing &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">Just</span>(x / y) &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        _ =&gt; <span class=\"keyword\">return</span> Nothing <span class=\"comment\">// Otherwise return Nothing</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">chainable_division</span>(<span class=\"title function_ invoke__\">chainable_division</span>(<span class=\"title function_ invoke__\">Just</span>(<span class=\"number\">2.0</span>), <span class=\"title function_ invoke__\">Just</span>(<span class=\"number\">0.0</span>)), <span class=\"title function_ invoke__\">Just</span>(<span class=\"number\">1.0</span>)); <span class=\"comment\">// inside chainable_division fails, outside chainable_division returns Nothing</span></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>使用<code>&gt;&gt;=</code>来传递多次匿名函数；多参数处理</li>\r\n</ul>\r\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">halve</span> :: <span class=\"type\">Int</span> -&gt; <span class=\"type\">Maybe</span> <span class=\"type\">Int</span></span><br><span class=\"line\"><span class=\"title\">halve</span> x</span><br><span class=\"line\">  | even x = <span class=\"type\">Just</span> (x `div` <span class=\"number\">2</span>)</span><br><span class=\"line\">  | odd x  = <span class=\"type\">Nothing</span></span><br><span class=\"line\"> <span class=\"comment\">-- This code halves x twice. it evaluates to Nothing if x is not a multiple of 4</span></span><br><span class=\"line\"><span class=\"title\">halve</span> x &gt;&gt;= halve</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>x &gt;&gt;= y即把x传递给函数y获得返回值</p>\r\n</blockquote>\r\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">chainable_division</span>(mx,my) =   mx &gt;&gt;=  ( λx -&gt;   my &gt;&gt;= (λy -&gt; <span class=\"type\">Just</span> (x / y))   )</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>在此处的<span class=\"math inline\">\\(\\lambda\\)</span>表示匿名函数</p>\r\n</blockquote>\r\n<p>在上面的案例中，有以下几种类型：</p>\r\n<ul>\r\n<li><em>Monadic Type</em>：<code>Maybe</code></li>\r\n<li><em>Unit operation</em>（类型转换）：<code>Just(x)</code></li>\r\n<li><em>Bind operation</em>（组合子）： <code>&gt;&gt;=</code> or\r\n<code>.flatMap()</code></li>\r\n</ul>\r\n<h1 id=\"标准定义\">标准定义</h1>\r\n<h2 id=\"构成\">构成</h2>\r\n<ul>\r\n<li><p><strong>A <a\r\nhref=\"https://en.wikipedia.org/wiki/Type_constructor\">type\r\nconstructor</a></strong> <em>M</em> that builds up a <strong>monadic\r\ntype</strong> <code>M T</code></p></li>\r\n<li><p><strong>type converter</strong>常被叫做 <strong>unit</strong> or\r\n<strong>return</strong>，用于将一个对象<code>x</code>嵌入到单子中，<code>unit(x) :: T -&gt; M T</code></p></li>\r\n<li><p><strong>combinator</strong>\r\n典型的叫做<strong>bind</strong>，并表示为中缀算子<code>&gt;&gt;=</code>，去<u>包装</u>一个单体变量，接着把它插入到一个单体函数/表达式之中，结果为一个新的单体值：</p></li>\r\n<li><p><code>(&gt;&gt;=) : (M T, T → M U) → M U</code>so if\r\n<code>mx : M T</code> and <code>f : T → M U</code>, then\r\n<code>(mx &gt;&gt;= f) : M U</code></p></li>\r\n</ul>\r\n<h2 id=\"遵循定律\">遵循定律</h2>\r\n<ul>\r\n<li>unit是bind的左单比特 <code>unit(x) &gt;&gt;= f</code>\r\n<strong>↔︎</strong> <code>f(x)</code></li>\r\n<li>unit是bind的右单比特 <code>ma &gt;&gt;= unit</code>\r\n<strong>↔︎</strong> <code>ma</code></li>\r\n</ul>\r\n<blockquote>\r\n<p>此处左单比特、右单比特即单位元，identity</p>\r\n</blockquote>\r\n<ul>\r\n<li>bind符合结合律 <code>ma &gt;&gt;= λx → (f(x) &gt;&gt;= g)</code>\r\n<strong>↔︎</strong> <code>(ma &gt;&gt;= f) &gt;&gt;= g</code></li>\r\n</ul>\r\n<blockquote>\r\n<p>单子构成在函子（functor）范畴上的<a\r\nhref=\"https://zh.wikipedia.org/wiki/%E5%B9%BA%E5%8D%8A%E7%BE%A4\">幺半群</a></p>\r\n</blockquote>\r\n","feature":true,"text":"基本概念 m类型构造子 return :: a -> M a：（也叫做unit），接受一个类型a的值，把它们包装成使用这个类型构造子建造的类型m a的“单子值”...","permalink":"/post/monad概览","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"study","slug":"study","count":5,"path":"api/categories/study.json"},{"name":"functional programming","slug":"study/functional-programming","count":1,"path":"api/categories/study/functional-programming.json"}],"tags":[{"name":"function programming","slug":"function-programming","count":1,"path":"api/tags/function-programming.json"},{"name":"monad","slug":"monad","count":1,"path":"api/tags/monad.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">基本概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A0%87%E5%87%86%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">标准定义</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%84%E6%88%90\"><span class=\"toc-text\">构成</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%81%B5%E5%BE%AA%E5%AE%9A%E5%BE%8B\"><span class=\"toc-text\">遵循定律</span></a></li></ol></li></ol>","author":{"name":"sensuschung","slug":"blog-author","avatar":"/img/avator_1.jpg","link":"/","description":"日常/笔记/日记等","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Web基础题","uid":"ae62d96c4d4b44da94c1e2f3ddf6dd43","slug":"攻防view_source","date":"2024-06-24T16:04:00.000Z","updated":"2024-06-25T15:39:53.093Z","comments":true,"path":"api/articles/攻防view_source.json","keywords":null,"cover":null,"text":"GET/POST 请用GET方式提交一个名为a,值为1的变量 get方式提交比较容易，get传值方式参数可以存在URL中，题目中要求用get方式提交一个a=1的...","permalink":"/post/攻防view_source","photos":[],"count_time":{"symbolsCount":635,"symbolsTime":"1 mins."},"categories":[{"name":"study","slug":"study","count":5,"path":"api/categories/study.json"},{"name":"CTF","slug":"study/CTF","count":1,"path":"api/categories/study/CTF.json"},{"name":"基础","slug":"study/CTF/基础","count":1,"path":"api/categories/study/CTF/基础.json"}],"tags":[{"name":"CTF","slug":"CTF","count":1,"path":"api/tags/CTF.json"},{"name":"web攻击","slug":"web攻击","count":1,"path":"api/tags/web攻击.json"},{"name":"基础题","slug":"基础题","count":1,"path":"api/tags/基础题.json"}],"author":{"name":"sensuschung","slug":"blog-author","avatar":"/img/avator_1.jpg","link":"/","description":"日常/笔记/日记等","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"NIS2334复习","uid":"e1111deafa6114c30ea11c8e9b534620","slug":"ICE2501_Review","date":"2024-06-02T14:16:00.000Z","updated":"2024-06-20T08:41:25.562Z","comments":true,"path":"api/articles/ICE2501_Review.json","keywords":null,"cover":[],"text":"零碎知识点 signals and systems Sa函数 basic signals unit impulse/unit step properties t...","permalink":"/post/ICE2501_Review","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"study","slug":"study","count":5,"path":"api/categories/study.json"},{"name":"class","slug":"study/class","count":3,"path":"api/categories/study/class.json"}],"tags":[{"name":"review","slug":"review","count":3,"path":"api/tags/review.json"},{"name":"2023-2024Spring","slug":"2023-2024Spring","count":3,"path":"api/tags/2023-2024Spring.json"},{"name":"signals&systems","slug":"signals-systems","count":1,"path":"api/tags/signals-systems.json"}],"author":{"name":"sensuschung","slug":"blog-author","avatar":"/img/avator_1.jpg","link":"/","description":"日常/笔记/日记等","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}