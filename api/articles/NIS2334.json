{"title":"NIS2334","uid":"9d95c27b9e5cf5edf293baff1f7390d5","slug":"NIS2334","date":"2024-06-02T14:16:00.000Z","updated":"2024-07-23T13:30:42.505Z","comments":true,"path":"api/articles/NIS2334.json","keywords":null,"cover":[],"content":"<p>可能考点！！！！！！</p>\r\n<p>1.计算题：</p>\r\n<ul>\r\n<li>扇区读写时间</li>\r\n<li>信号量</li>\r\n<li>周转时间</li>\r\n</ul>\r\n<p>2.重点</p>\r\n<ul>\r\n<li>概述\r\n<ul>\r\n<li>spooling</li>\r\n<li>缓冲/中断/DMA</li>\r\n<li>操作系统的特征</li>\r\n<li>操作系统的功能</li>\r\n<li><a href=\"1\">操作系统的概念</a></li>\r\n<li>并发</li>\r\n<li>脱机/假脱机</li>\r\n</ul></li>\r\n<li>进程和线程\r\n<ul>\r\n<li>进程调度算法</li>\r\n<li>线程基本理解（用户级、内核级、混合级）</li>\r\n<li>同步和互斥</li>\r\n<li>调度层次</li>\r\n<li>进程思索条件</li>\r\n<li>调度死锁处理：银行家、coffman</li>\r\n<li>生产者-消费者程序</li>\r\n<li>PV操作</li>\r\n</ul></li>\r\n<li>内存管理\r\n<ul>\r\n<li>局部性原理，对虚拟分段、多级分页、虚拟分页、虚拟段页式影响</li>\r\n<li>虚拟地址与物理地址转换</li>\r\n<li>多级页表</li>\r\n<li>系统抖动及页面淘汰算法</li>\r\n</ul></li>\r\n<li>设备和文件\r\n<ul>\r\n<li>机械盘为什么慢</li>\r\n<li>磁盘调度</li>\r\n<li>node，文件大小</li>\r\n<li>打开文件接口，文件控制表</li>\r\n<li>IO标准库</li>\r\n</ul></li>\r\n<li>综合\r\n<ul>\r\n<li>局部性原理</li>\r\n<li>中断处理程序、信号、陷阱</li>\r\n</ul></li>\r\n</ul>\r\n<h1 id=\"简介\">简介</h1>\r\n<h2 id=\"基本概念\">基本概念</h2>\r\n<h3 id=\"设计目标\">设计目标</h3>\r\n<ul>\r\n<li><p>方便：作为用户/计算机<u>接口</u>的操作系统</p></li>\r\n<li><p>有效：作为<u>资源管理器</u>的操作系统</p></li>\r\n<li><p>扩展能力：操作系 统的<u>易扩展性</u></p>\r\n<ul>\r\n<li><u>硬件</u>升级、新型硬件</li>\r\n<li><u>新服务</u></li>\r\n<li><u>纠正</u>错误（打补丁）</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"地位和作用\">地位和作用</h3>\r\n<ul>\r\n<li><u>屏蔽</u>底层硬件的细节</li>\r\n<li><u>驱动、管理</u>硬件设备</li>\r\n<li>给<u>应用程序</u>提供服务</li>\r\n</ul>\r\n<h3 id=\"操作系统概念\"><a id=\"1\">操作系统概念</a></h3>\r\n<ul>\r\n<li>用户观点——用户使用计算机的<strong>界面</strong>\r\n<ul>\r\n<li>命令方式</li>\r\n<li>系统调用</li>\r\n<li>图形界面</li>\r\n</ul></li>\r\n<li>软件观点——程序和数据结构的集合\r\n<ul>\r\n<li>系统工具:shell、系统管理</li>\r\n<li>OS库（I/O）</li>\r\n</ul></li>\r\n</ul>\r\n<blockquote>\r\n<p>操作系统是<strong>控制和管理计算机系统内各种硬件和软件资源</strong>、有效地<strong>组织多道程序运行</strong>的<strong>系统软件</strong>（或程序集合），是用户与计算机之间的接口。</p>\r\n</blockquote>\r\n<blockquote>\r\n<ul>\r\n<li>是软件，且是<strong>系统软件</strong></li>\r\n<li>基本职能是<strong>控制和管理</strong>系统资源</li>\r\n<li><strong>提供服务</strong>，方便用户使用</li>\r\n</ul>\r\n</blockquote>\r\n<h3 id=\"作业与进程\">作业与进程</h3>\r\n<p><strong>作业</strong></p>\r\n<ul>\r\n<li>作业（一个<strong>完整</strong>的任务，可能包括<font color=\"red\">多个程序</font>）</li>\r\n<li>作业步（作业中<u>相对独立</u>的部分）</li>\r\n</ul>\r\n<p><strong>进程</strong></p>\r\n<ul>\r\n<li>UNIX系统上的进程定义为程序在一个<u>数据集合</u>上的<strong>运行活动</strong>，它是<strong>系统进行资源分配和调度的一个可<font color=\"red\">并发</font>执行的独立单位</strong>。进程和程序之间既有区别又有联系。</li>\r\n</ul>\r\n<h3 id=\"操作系统的特征\"><a id=\"3\">操作系统的特征</a></h3>\r\n<p><strong>并发</strong>（Concurrence）</p>\r\n<ul>\r\n<li>在一段时间内，多个程序同时在运行。</li>\r\n<li><strong><font color=\"red\">并发与并行的区别</font></strong></li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>任务执行方式：</strong></p>\r\n<ul>\r\n<li><strong>并行：</strong>\r\n并行处理要求系统具有<u>多个处理单元</u>，这些单元可以同时执行不同的任务。每个任务都在独立的处理单元上运行，彼此之间互不干扰。这种方式能够<u>充分利用硬件资源，加速任务的完成</u>。</li>\r\n<li><strong>并发：</strong>\r\n并发处理强调任务的<u>交替执行或重叠执行</u>。即使系统只有一个处理单元，也可以通过任务间的切换，使得看似同时运行多个任务。并发更关注<u>任务之间的协作和调度</u>，以确保系统的效率和响应性。</li>\r\n</ul>\r\n<p><strong>目标：</strong></p>\r\n<ul>\r\n<li><strong>并行：</strong>\r\n并行的主要目标是通过<u>同时执行多个任务</u>来提高整体性能。这通常涉及到将大任务划分为小的子任务，每个子任务由不同的处理单元执行，最终合并它们的结果。</li>\r\n<li><strong>并发：</strong>\r\n并发的目标是<u>更好地管理多个任务</u>之间的关系，以确保它们能够有效地协同工作。并发处理通常用于处理实时性要求不高的任务，强调任务之间的逻辑结构和相互影响。</li>\r\n</ul>\r\n</blockquote>\r\n<p><strong>共享</strong>（Sharing）</p>\r\n<ul>\r\n<li>互斥共享：打印机，写数据</li>\r\n<li>同时共享：磁盘，只读数据</li>\r\n</ul>\r\n<p><strong>虚拟</strong></p>\r\n<ul>\r\n<li>目的：为裸机提供高级抽象服务，虚拟出功能更强大的虚拟服务。</li>\r\n<li><strong>例子：分时系统；SPOOLING</strong></li>\r\n</ul>\r\n<p><strong>不确定性</strong></p>\r\n<ul>\r\n<li>同样一个数据集的同一个程序在<u>同样的计算机环境</u>下运行，其执行<u>顺序</u>和<u>所需时间</u>都不相同。</li>\r\n</ul>\r\n<h3 id=\"现代操作系统的新特征\">现代操作系统的新特征</h3>\r\n<details>\r\n<summary>\r\n现代操作系统的新特征\r\n</summary>\r\n<p>\r\n<strong>微内核体系结构：</strong>微内核体系结构将操作系统的基本功能（如内存管理、进程管理、通信等）最小化，并将其他功能移到用户空间。这种设计提高了系统的可扩展性和稳定性，因为内核的代码量减少，从而降低了出错的可能性。\r\n</p>\r\n<p>\r\n<strong>多线程：</strong>多线程允许一个进程内的多个线程并行执行，每个线程共享进程的资源但有独立的执行路径。这提高了应用程序的响应速度和处理能力，尤其在多处理器系统中表现尤为明显。\r\n</p>\r\n<p>\r\n<strong>对称多处理（SMP）：</strong>对称多处理支持多个处理器共享同一内存和I/O资源，处理器之间可以并行执行任务。这种架构简化了多处理器系统的设计和实现，提升了系统的性能和扩展能力。\r\n</p>\r\n<p>\r\n<strong>分布式：</strong>分布式操作系统使得资源和服务可以分布在多个网络节点上，并通过网络进行协作。它提供了对分布式计算资源的统一管理和访问，使得用户和应用程序能够透明地使用远程资源。\r\n</p>\r\n<p>\r\n<strong>面向对象设计：</strong>面向对象设计方法将系统功能和资源抽象为对象，通过继承和多态性提高了代码的重用性和可维护性。现代操作系统利用这种设计方法简化了系统的扩展和修改。\r\n</p>\r\n</details>\r\n<h4 id=\"微内核体系结构\"><strong>微内核体系结构</strong></h4>\r\n<p><img src=\"https://raw.githubusercontent.com/sensuschung/wordpress_image/master/blog/202406100039550.png\" alt=\"image-20240610003916511\" style=\"zoom:50%;\" caption=\"微内核体系示意图\"/></p>\r\n<p><strong>单体内核（monolithic kernel）</strong></p>\r\n<ul>\r\n<li>系统由<u>大内核</u>构成，该内核提供的功能<u>：调度、文件系统、网络、设备驱动程序、存储管理</u>等</li>\r\n<li>大内核作为<u>一个进程</u>实现，所有元素<u>共享相同的地址空间</u></li>\r\n</ul>\r\n<p><strong>微内核（micro kernel）</strong></p>\r\n<ul>\r\n<li>内核仅具有基本功能：<u>地址空间、进程通信和基本调度</u>。</li>\r\n<li>‘其他的操作系统服务都由运行在<u>用户模式</u>下<u>进程</u>提供。</li>\r\n<li>优点：\r\n<ul>\r\n<li>内核和服务分开，可以<u>订制服务</u>；</li>\r\n<li>体系结构更简单灵活，适合于<u>分布式环境</u></li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"多线程\"><strong>多线程</strong></h4>\r\n<ul>\r\n<li><strong>线程</strong>：可分派<u>工作单元</u>。包括：处理器上下文、栈中自己的数据区域。</li>\r\n<li><strong>进程：</strong>一个或多个线程及其相关<u>系统资源的集合</u>。</li>\r\n<li><strong>优点：</strong>\r\n<ul>\r\n<li>方便处理<strong>独立</strong>任务（如监听服务）</li>\r\n<li>线程间<strong>切换开销小</strong></li>\r\n</ul></li>\r\n</ul>\r\n<details>\r\n<summary>\r\n线程和进程的区别\r\n</summary>\r\n<p>\r\n<strong>定义：</strong>\r\n</p>\r\n<ul>\r\n<li>\r\n<strong>进程（Process）：</strong>进程是程序的一次执行实例，是操作系统进行资源分配和调度的基本单位。每个进程都有独立的内存空间和系统资源。\r\n</li>\r\n<li>\r\n<strong>线程（Thread）：</strong>线程是进程内的一个执行单元，是程序执行的最小单位。线程共享进程的内存空间和资源，但有独立的执行路径和局部变量。\r\n</li>\r\n</ul>\r\n<p>\r\n<strong>内存空间：</strong>\r\n</p>\r\n<ul>\r\n<li>\r\n<strong>进程：</strong>每个进程有独立的地址空间，一个进程崩溃不会影响其他进程。\r\n</li>\r\n<li>\r\n<strong>线程：</strong>同一进程内的线程共享相同的地址空间，一个线程崩溃可能导致整个进程崩溃。\r\n</li>\r\n</ul>\r\n<p>\r\n<strong>通信方式：</strong>\r\n</p>\r\n<ul>\r\n<li>\r\n<strong>进程：</strong>进程之间的通信需要通过操作系统提供的进程间通信（IPC）机制，如管道、消息队列、共享内存等。\r\n</li>\r\n<li>\r\n<strong>线程：</strong>线程之间可以直接通过共享内存进行通信，通信开销较低。\r\n</li>\r\n</ul>\r\n<p>\r\n<strong>资源开销：</strong>\r\n</p>\r\n<ul>\r\n<li>\r\n<strong>进程：</strong>创建和销毁进程的开销较大，因为需要分配和回收独立的内存和资源。\r\n</li>\r\n<li>\r\n<strong>线程：</strong>创建和销毁线程的开销较小，线程间切换的开销也比进程间切换小。\r\n</li>\r\n</ul>\r\n<p>\r\n<strong>调度：</strong>\r\n</p>\r\n<ul>\r\n<li>\r\n<strong>进程：</strong>操作系统独立调度进程，每个进程可以在不同的处理器上运行。\r\n</li>\r\n<li>\r\n<strong>线程：</strong>操作系统独立调度线程，同一进程内的线程也可以在不同的处理器上运行，支持并行执行。\r\n</li>\r\n</ul>\r\n<p>\r\n<strong>应用场景：</strong>\r\n</p>\r\n<ul>\r\n<li>\r\n<strong>进程：</strong>适用于需要强隔离、独立运行的任务，如不同的应用程序。\r\n</li>\r\n<li>\r\n<strong>线程：</strong>适用于需要高效并发、共享数据的任务，如多线程服务器、并行计算。\r\n</li>\r\n</ul>\r\n</details>\r\n<h4 id=\"对称多处理smp\">对称多处理SMP</h4>\r\n<p><strong>基本要求</strong>：</p>\r\n<ul>\r\n<li>多个处理器</li>\r\n<li>共享<strong>主存储器和IO设备</strong></li>\r\n<li>处理器都可以执行<strong>相同</strong>的功能</li>\r\n</ul>\r\n<p><strong>优势</strong></p>\r\n<ul>\r\n<li>性能（优于单处理器）</li>\r\n<li>可用性（鲁棒性）</li>\r\n<li>（性能）可增量发展</li>\r\n<li>（产品）可扩展性</li>\r\n</ul>\r\n<details>\r\n<summary>\r\n为什么SMP具有产品可扩展性\r\n</summary>\r\n<p>\r\n<strong>共享内存架构：</strong>\r\n</p>\r\n<ul>\r\n<li>\r\n<strong>简单易扩展：</strong>\r\nSMP系统中的所有处理器共享同一块物理内存和I/O设备。当增加新的处理器时，只需将其连接到共享内存总线上，无需改变现有系统的架构和数据流。\r\n</li>\r\n<li>\r\n<strong>一致性和简单性：</strong>\r\n共享内存模型使得所有处理器都能访问相同的内存地址空间，这简化了开发和调试过程，因为程序员可以依赖于内存的一致性。\r\n</li>\r\n</ul>\r\n<p>\r\n<strong>并行处理能力：</strong>\r\n</p>\r\n<ul>\r\n<li>\r\n<strong>提高性能：</strong>\r\n通过增加更多的处理器，SMP系统可以并行处理更多任务，提高系统的整体性能和吞吐量。增加处理器的过程相对直接，只需配置新的处理器即可。\r\n</li>\r\n<li>\r\n<strong>负载均衡：</strong>\r\nSMP操作系统能够智能地将任务分配给不同的处理器，确保系统资源得到充分利用，并防止某个处理器过载。这种动态负载均衡能力使得系统能平稳扩展。\r\n</li>\r\n</ul>\r\n<p>\r\n<strong>标准化和兼容性：</strong>\r\n</p>\r\n<ul>\r\n<li>\r\n<strong>硬件兼容性：</strong>\r\nSMP系统通常使用标准化的硬件组件，如通用的处理器和内存模块。这种标准化的设计使得添加新处理器变得简单且具有成本效益。\r\n</li>\r\n<li>\r\n<strong>软件兼容性：</strong>\r\nSMP操作系统和应用软件通常设计为支持多处理器环境，这意味着现有的软件可以在扩展后的SMP系统上无缝运行，无需进行重大修改。\r\n</li>\r\n</ul>\r\n<p>\r\n<strong>容错能力和可靠性：</strong>\r\n</p>\r\n<ul>\r\n<li>\r\n<strong>高可用性：</strong>\r\n通过冗余配置多个处理器，SMP系统可以在某个处理器故障时继续运行，提升系统的可靠性和容错能力。增加处理器可以进一步增强这种容错能力。\r\n</li>\r\n<li>\r\n<strong>简化维护：</strong>\r\n由于处理器是模块化的组件，扩展和更换处理器变得相对简单，维护和升级也更加方便。\r\n</li>\r\n</ul>\r\n<p>\r\n<strong>经济效益：</strong>\r\n</p>\r\n<ul>\r\n<li>\r\n<strong>成本效益：</strong>\r\n由于SMP系统采用标准化组件，扩展系统的成本相对较低。企业可以根据需要逐步增加处理器，而不必一次性投入大量资金。\r\n</li>\r\n<li>\r\n<strong>灵活投资：</strong>\r\n企业可以根据实际需求逐步扩展处理能力，而无需提前为未来的需求进行大量投资，这种灵活性有助于降低初始成本和投资风险。\r\n</li>\r\n</ul>\r\n</details>\r\n<h4 id=\"分布式\">分布式</h4>\r\n<p>多机系统好像具有一个<strong>单一的主存空间</strong>、<strong>辅存</strong>空间以及其他<strong>统一</strong>的<strong>存取</strong>措施。</p>\r\n<details>\r\n<summary>\r\n现代操作系统的分布式特征\r\n</summary>\r\n<p>\r\n<strong>资源共享：</strong>\r\n现代分布式操作系统能够管理和协调分布在不同网络节点上的资源，使得这些资源可以在整个网络中共享和访问。这包括处理能力、存储资源、数据和设备等。\r\n</p>\r\n<p>\r\n<strong>透明性：</strong>\r\n分布式操作系统隐藏了系统的分布性和复杂性，使得用户和应用程序可以像访问本地系统一样访问分布式系统的资源和服务。透明性包括位置透明性、访问透明性、迁移透明性和复制透明性等。\r\n</p>\r\n<p>\r\n<strong>可靠性和容错性：</strong>\r\n通过冗余和故障检测机制，分布式操作系统可以在某些节点或资源发生故障时继续提供服务，从而提高系统的可靠性和容错性。这通常包括数据备份、自动故障恢复和负载均衡等。\r\n</p>\r\n<p>\r\n<strong>并行处理：</strong>\r\n分布式操作系统支持并行处理，通过将任务分割成多个子任务并分配给不同的节点执行，从而提高系统的处理能力和效率。这对于大规模计算和复杂数据处理任务尤为重要。\r\n</p>\r\n<p>\r\n<strong>扩展性：</strong>\r\n分布式操作系统可以通过增加新的节点来扩展系统的容量和性能，支持应对不断增加的用户请求和数据处理需求。系统能够动态添加或移除节点，保持系统性能和资源的高效利用。\r\n</p>\r\n<p>\r\n<strong>一致性和协调：</strong>\r\n分布式操作系统提供一致性协议和协调机制，以保证分布式环境中数据的一致性和操作的同步。常用的一致性模型包括强一致性、最终一致性等。\r\n</p>\r\n<p>\r\n<strong>分布式文件系统：</strong>\r\n分布式操作系统通常包含分布式文件系统，使得文件可以跨越多个节点存储和访问，从而提高数据的可用性和可靠性。用户可以透明地访问和管理分布式文件。\r\n</p>\r\n</details>\r\n<h4 id=\"面向对象设计\">面向对象设计</h4>\r\n<p><strong>特点</strong></p>\r\n<ul>\r\n<li>方便地<strong>添加模块</strong></li>\r\n<li>方便<strong>定制</strong>操作系统</li>\r\n<li>促进了<strong>分布式</strong>工具和分布式操作系统的开发。</li>\r\n</ul>\r\n<p>##<a id=\"4\"> <u>缓冲、中断与DMA</u> </a></p>\r\n<h3 id=\"主要解决问题\">主要解决问题</h3>\r\n<ul>\r\n<li><strong>缓冲技术</strong>\r\n<ul>\r\n<li>处于CPU 和 外设之间， 解决速度不匹配问题</li>\r\n<li>例如，spooling</li>\r\n</ul></li>\r\n<li><strong>中断技术</strong>\r\n<ul>\r\n<li>解决 CPU 和 外设的协调</li>\r\n<li>(不再需要轮询外设状态)</li>\r\n</ul></li>\r\n<li><strong>DMA技术</strong>\r\n<ul>\r\n<li>数据转移过度消耗CPU资源的问题，进一步解放CPU</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"中断\">中断</h3>\r\n<ul>\r\n<li>现代所有CPU都支持中断</li>\r\n<li>用于<strong>提高处理器的利用率</strong></li>\r\n</ul>\r\n<blockquote>\r\n<p>不同类型</p>\r\n<ul>\r\n<li>I/O</li>\r\n<li>硬件错误、失效</li>\r\n<li>软件错误（栈溢出、非法指令等）</li>\r\n<li>定时器中断</li>\r\n</ul>\r\n</blockquote>\r\n<h3 id=\"dma\">DMA</h3>\r\n<ul>\r\n<li>驱动程序设定传输<u>数据的长度、源地址与目的地址</u></li>\r\n<li>Device<u>启动DMA传输</u>，完成所有数据的传输</li>\r\n<li>数据传输完成时DMA 设备<strong>产生中断</strong></li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>基本原理</strong></p>\r\n<p>DMA技术的基本原理是将数据传输的控制交给一个专门的DMA控制器，该控制器不需要CPU的干预，可以直接对<u>内存和I/O设备</u>进行访问和传输。这个过程中，CPU只需启动DMA控制器，并在数据传输完成后<u>得到一个中断信号</u>，表明数据已经传输完毕。这样就可以达到高效率、低CPU负载的目的</p>\r\n</blockquote>\r\n<blockquote>\r\n<p><strong>优点</strong></p>\r\n<ul>\r\n<li>把比较固定的任务让DMA来做，可以减轻<strong>CPU</strong>负担，提高系统的效率</li>\r\n<li>DMA具有一般CPU没有的高效操作，提高系统的<strong>吞吐率</strong>；消除了每次只能传输一个数据的限制，<strong>传输效率</strong>提高</li>\r\n</ul>\r\n</blockquote>\r\n<h3 id=\"批处理\">批处理</h3>\r\n<details>\r\n<summary>\r\n批处理概述\r\n</summary>\r\n<p>\r\n批处理是一种计算机操作系统中的自动化技术，用于批量处理多个命令或任务。其主要特点包括：\r\n</p>\r\n<ul>\r\n<li>\r\n<strong>自动化执行：</strong>批处理允许用户将一系列的命令或任务按顺序组织在一个批处理文件中，然后通过执行该文件来自动化执行这些命令，而无需用户手动逐个输入和执行。\r\n</li>\r\n<li>\r\n<strong>批量处理：</strong>通过批处理，用户可以一次性处理多个任务或操作，这些任务可以是复制文件、备份数据、运行程序等，从而提高操作效率和减少手动操作的重复性。\r\n</li>\r\n<li>\r\n<strong>脚本语言支持：</strong>通常使用特定的脚本语言编写批处理文件，如Windows中的批处理文件（.bat文件）或Linux/Unix中的Shell脚本，这些脚本语言提供了控制流程、变量、循环等编程结构，使得批处理更加灵活和强大。\r\n</li>\r\n<li>\r\n<strong>批处理调度：</strong>批处理可以通过系统的调度器（如Windows任务计划程序）定时执行，也可以在特定条件满足时触发执行，从而实现自动化的后台任务管理。\r\n</li>\r\n</ul>\r\n<p>\r\n总体而言，批处理技术通过自动化和批量处理的方式，帮助用户简化和加快了日常计算机操作和管理任务的执行过程。\r\n</p>\r\n</details>\r\n<h3 id=\"多道程序设计\">多道程序设计</h3>\r\n<p>进一步提高CPU的利用率</p>\r\n<p><img src=\"https://raw.githubusercontent.com/sensuschung/wordpress_image/master/blog/202406092227686.png\" alt=\"image-20240609221806194\" style=\"zoom:67%;\" /></p>\r\n<p><strong>基本原理</strong></p>\r\n<p>​\r\n允许<u>多个程</u>序（作业）同时进入一个计算机系统的内存并启动进行<strong>交替计算</strong>的方法，也就是，计算机中可以同时存放多道程序，<u>从宏观上来看它们是并行的，多道程序都同时处于运行过程中，但都未运行结束，但是微观上是串行的，轮流占用CPU交替执行</u>，引入多道程序设计技术的根本目的是提高CPU的利用率，充分发挥计算机系统部件的并行性</p>\r\n<h4 id=\"总结利弊\">总结利弊</h4>\r\n<ul>\r\n<li>提高了<strong>CPU</strong>的利用率</li>\r\n<li>提高了<strong>内存和I/O设备</strong>的利用率</li>\r\n<li>改进了系统的<strong>吞吐率</strong></li>\r\n<li>充分发挥了系统的<strong>并行性</strong></li>\r\n<li>主要缺点是<strong>延长了作业周转时间</strong></li>\r\n</ul>\r\n<h3 id=\"spooling\"><a id=\"2\">SPOOLING</a></h3>\r\n<p><strong>为什么需要SPOOLING</strong></p>\r\n<ul>\r\n<li>受限于IO的作业，<u>输出缓冲</u>满，而输入空</li>\r\n<li>受限于CPU的作业，<u>输入缓冲区</u>满，而输出空</li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>什么是SPOOLing技术</strong> SPOOLing\r\n技术就是利用多道程序中的一道程序来模拟<strong>脱机输入时的外围控制机</strong>的功能，<strong>把低速\r\nI/O\r\n设备上的数据传送到高速磁盘上</strong>；用另一道程序来模拟<strong>脱机输出时外围控制</strong>机的功能，把<u>数据从磁盘传送到低速输出设备上</u>。这样，便在主机的直接控制下，实现脱机输入、输出功能。此时的外围操作与\r\nCPU 对数据的处理同时进行，这种在联机情况下实现的同时外围操作称为\r\nSPOOLing ，或称假脱机操作。</p>\r\n</blockquote>\r\n<blockquote>\r\n<p><strong>优点</strong></p>\r\n<ul>\r\n<li>提高了<strong>I/O速度</strong>。从对低速I/O设备进行的I/O操作变为对输入井或输出井的操作，如同脱机操作一样，提高了I/O速度，缓和了CPU与低速I/O设备速度不匹配的矛盾。</li>\r\n<li>将独占设备改造为<strong>共享设备</strong>。因为在SPOOLing系统的系统中，实际上<u>并没为任何进程分配设备，</u>而只是<u>在输入井或输出井中为进程分配一个<strong>存储区</strong>和建立一张<strong>I/O请求表</strong></u>。这样，便把独占设备改造为共享设备。</li>\r\n<li>实现了<strong>虚拟设备</strong>功能。多个进程同时使用一独享设备，而对每一进程而言，都认为自己独占这一设备，从而实现了设备的虚拟分配。不过，该设备是<u>逻辑上的设备</u></li>\r\n</ul>\r\n</blockquote>\r\n<p><img src=\"https://raw.githubusercontent.com/sensuschung/wordpress_image/master/blog/202406092227549.png\" alt=\"image-20240609222602484\" style=\"zoom:50%;\" /></p>\r\n<p><strong>案例</strong></p>\r\n<ul>\r\n<li><p>将独享打印设备，变成多个程序共享的虚拟设备</p></li>\r\n<li><p>工作方法:</p>\r\n<p>系统对于用户的打印输出，但并不真正把打印机分配给该用户进程，而是先在输出井中申请一个<u>空闲盘块区</u>，并将要打印的数据送入其中；然后为用户<u>申请并填写请求打印表</u>，将该表挂到请求打印队列上。若打印机空闲，输出程序从请求打印队首取表，将要打印的数据从输出井传送到<u>内存缓冲区</u>，再进行打印，直到打印队列为空。</p></li>\r\n</ul>\r\n<h2 id=\"现代操作系统类型\">现代操作系统类型</h2>\r\n<h3 id=\"分时系统\">分时系统</h3>\r\n<p><strong>概念</strong></p>\r\n<p>分时主要指若干并发程序对<u>CPU时间的共享</u></p>\r\n<p><strong>优点</strong></p>\r\n<p>响应快界面友好、多用户便于普及、便于资源共享</p>\r\n<p><strong>与批处理多道程序设计的比较</strong></p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th></th>\r\n<th>批处理多道程序设计</th>\r\n<th>分时系统</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>设计目标</td>\r\n<td>充分使用<strong>处理器</strong></td>\r\n<td>减少响应时间</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>指令源</td>\r\n<td><u>作业控制语言</u>，作业命令</td>\r\n<td>终端键入的命令</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><strong>基本特征</strong></p>\r\n<details>\r\n<summary>\r\n多路性（Multiprogramming）\r\n</summary>\r\n<pre><code>     &lt;p&gt;系统能够同时处理多个任务，使得多个用户能够同时使用系统资源。每个任务都在独立的虚拟环境中运行，互不干扰。&lt;/p&gt;     &lt;/details&gt;          &lt;details&gt;         &lt;summary&gt;独立性（Independence）&lt;/summary&gt;         &lt;p&gt;每个用户的任务在系统中是相互独立的，彼此不会互相干扰或依赖。每个用户可以在系统中运行自己的程序，而不受其他用户程序的影响。&lt;/p&gt;     &lt;/details&gt;          &lt;details&gt;         &lt;summary&gt;交互性（Interactivity）&lt;/summary&gt;         &lt;p&gt;用户能够与系统进行实时的交互操作。他们可以通过终端或其他输入设备输入命令、请求数据，系统能够及时响应并返回结果给用户。&lt;/p&gt;     &lt;/details&gt;          &lt;details&gt;         &lt;summary&gt;及时性（Timeliness）&lt;/summary&gt;         &lt;p&gt;系统能够在合理的时间内响应用户的请求和任务，保证系统资源的有效利用和用户体验的流畅性。响应时间应该足够快，以便用户感觉不到延迟。&lt;/p&gt;     &lt;/details&gt;</code></pre>\r\n<h3 id=\"实时系统\">==实时系统==</h3>\r\n<p><strong>特点</strong>：</p>\r\n<p><font color=\"red\">响应时间很快</font>、可以在毫秒甚至微秒，在限定时间内响应</p>\r\n<p><strong>应用</strong>：</p>\r\n<p><font color=\"red\"><strong>过程控制</strong>系统、<strong>信息查询</strong>系统、<strong>事务处理</strong>系统</font></p>\r\n<p><strong>分类</strong>：</p>\r\n<ul>\r\n<li>硬实时系统</li>\r\n<li>软实时系统</li>\r\n</ul>\r\n<p><strong>与分时系统区别：</strong></p>\r\n<p><font color=\"red\"><u>交互能力</u>较弱，<u>系统专用</u>，响应时间更严格，<u>及时可靠性</u>要求更高</font></p>\r\n<h3 id=\"微机操作系统\">微机操作系统</h3>\r\n<p><strong>单用户系统</strong></p>\r\n<p>资源独享，<strong>不支持</strong><u>批处理、多任务、多道程序设计</u></p>\r\n<p><strong>用于工作站的系统</strong></p>\r\n<ul>\r\n<li><font color=\"red\">单用户使用</font></li>\r\n<li>支持多道程序设计</li>\r\n</ul>\r\n<p><strong>用于服务器的系统</strong></p>\r\n<ul>\r\n<li><font color=\"red\">支持多用户</font></li>\r\n<li>支持多道程序设计</li>\r\n<li>实例：Unix以及微软的所有系统</li>\r\n</ul>\r\n<h3 id=\"多处理机系统\">多处理机系统</h3>\r\n<ul>\r\n<li>由于受<u>电磁技术</u>的限制，单处理机<u>系统速度</u>受到限制，因此，需要多处理机系统</li>\r\n</ul>\r\n<p><strong><font color=\"red\">分类</font></strong></p>\r\n<ul>\r\n<li>主从式</li>\r\n<li>对称式</li>\r\n</ul>\r\n<details>\r\n<summary>\r\n多处理机系统概述\r\n</summary>\r\n<p>\r\n多处理机系统可以根据架构的不同分为对称式多处理机（SMP）和主从式多处理机两种：\r\n</p>\r\n<p>\r\n<strong>对称式多处理机（SMP）：</strong>所有处理器共享同一主存储器，每个处理器都可以访问共享的主存储器和I/O设备。处理器具有相同的权限和能力，可以独立执行任务，并通过共享总线或交叉开关进行通信。\r\n</p>\r\n<p>\r\n<strong>主从式多处理机：</strong>有一个或多个主处理器负责调度和协调系统中的其他从处理器。主处理器负责分配任务和资源，从处理器执行指定的计算任务，通常只能访问局部内存。\r\n</p>\r\n<p>\r\n选择适当的多处理机架构取决于应用的性能需求、系统复杂性和成本考量。\r\n</p>\r\n</details>\r\n<h3 id=\"网络操作系统\">网络操作系统</h3>\r\n<ul>\r\n<li><p>网络操作系统是在各种各样自治的计算机原有操作系统基础上，加上具有<strong>网络访问功能</strong>的模块形成的。这些模块使网络上的计算机能方便、有效地<strong>共享网络资源</strong>，实现各种<strong>通信服务</strong>的有关协议。</p></li>\r\n<li><p>网络操作系统<strong>不是</strong>一个<u>集中、统一</u>的操作系统。</p></li>\r\n</ul>\r\n<p><strong>特征</strong>：</p>\r\n<p><font color=\"red\">分布性、自治性、互连性、可见性</font></p>\r\n<details>\r\n<summary>\r\n网络操作系统特点\r\n</summary>\r\n<p>\r\n<strong>分布性：</strong>网络操作系统能够管理和协调分布在不同网络节点上的资源和服务，使得这些资源和服务可以在整个网络中共享和访问。\r\n</p>\r\n<p>\r\n<strong>自治性：</strong>网络操作系统中的每个节点都可以独立运行和管理自身的资源，具有自主的操作和处理能力。\r\n</p>\r\n<p>\r\n<strong>互连性：</strong>网络操作系统通过网络协议和通信机制连接不同的节点，使得它们可以进行数据交换和协同工作，形成一个统一的系统。\r\n</p>\r\n<p>\r\n<strong>可见性：</strong>网络操作系统提供了对网络中资源和服务的可见性，使得用户和应用程序可以发现、访问和利用网络中的各种资源。\r\n</p>\r\n</details>\r\n<h3 id=\"分布式操作系统\">分布式操作系统</h3>\r\n<p><strong>概念</strong></p>\r\n<ul>\r\n<li>多计算机系统：<u>地理</u>位置不同，软硬件资源不同</li>\r\n<li>具有一个<strong>统一的操作系统</strong>：分配<u>子任务</u>，<u>调度</u>，管理资源，<font color=\"red\">对用户透明</font></li>\r\n</ul>\r\n<p><strong>特征</strong></p>\r\n<p><font color=\"red\">分布式处理、模块化结构、利用信息通信、实施整体控制</font></p>\r\n<details>\r\n<summary>\r\n分布式系统特征\r\n</summary>\r\n<p>\r\n<strong>分布式处理：</strong>分布式系统中的任务可以分布在多个节点或处理器上并行执行，从而提高系统的整体处理能力和效率。\r\n</p>\r\n<p>\r\n<strong>模块化结构：</strong>系统由多个相互独立的模块组成，每个模块负责不同的功能或服务，模块之间通过定义良好的接口进行通信和协作。\r\n</p>\r\n<p>\r\n<strong>利用信息通信：</strong>节点之间通过网络通信来进行数据传输和信息交换，实现节点之间的协调和合作。\r\n</p>\r\n<p>\r\n<strong>实施整体控制：</strong>尽管系统由多个分布式节点组成，但需要通过统一的控制和调度机制来管理和协调整个系统的运行，保证系统的一致性和可靠性。\r\n</p>\r\n</details>\r\n<p><strong>特点</strong></p>\r\n<p><font color=\"red\">透明性、灵活性、可靠性、高性能、可扩充性</font></p>\r\n<details>\r\n<summary>\r\n分布式系统特点\r\n</summary>\r\n<p>\r\n<strong>透明性：</strong>分布式系统隐藏了系统的分布性和复杂性，使得用户和应用程序可以像访问本地系统一样访问分布式系统的资源和服务。\r\n</p>\r\n<p>\r\n<strong>灵活性：</strong>分布式系统可以根据需求动态分配和管理资源，支持不同的应用程序和服务，并能够快速响应变化和增加新的节点。\r\n</p>\r\n<p>\r\n<strong>可靠性：</strong>分布式系统通过冗余和容错机制提高系统的可靠性，即使部分节点或资源出现故障，系统仍能保持正常运行。\r\n</p>\r\n<p>\r\n<strong>高性能：</strong>分布式系统利用并行处理和分布式计算能力，提高系统的整体性能和处理能力，能够处理大规模数据和复杂任务。\r\n</p>\r\n<p>\r\n<strong>可扩充性：</strong>分布式系统可以通过增加节点或资源来扩展系统的容量和性能，支持应对增加的用户请求和数据处理需求。\r\n</p>\r\n</details>\r\n<h2 id=\"操作系统的功能\">操作系统的功能</h2>\r\n<h3 id=\"处理机管理进程调度\">处理机管理（进程调度）</h3>\r\n<p><strong>原因</strong></p>\r\n<p>在一段时间内，<font color=\"red\">只能有一个进程</font>在CPU中执行</p>\r\n<p><font color=\"red\"><strong>基本功能</strong></font></p>\r\n<ul>\r\n<li><u>作业和进程</u>调度</li>\r\n<li>进程<u>控制</u></li>\r\n<li>进程<u>通信</u></li>\r\n</ul>\r\n<blockquote>\r\n<p>同步方式和互斥方式；通信机制</p>\r\n</blockquote>\r\n<h3 id=\"存储管理\">存储管理</h3>\r\n<p><strong>考虑因素</strong></p>\r\n<ul>\r\n<li>速度</li>\r\n<li>大小</li>\r\n<li>成本</li>\r\n</ul>\r\n<p><font color=\"red\"><strong>基本功能</strong></font></p>\r\n<ul>\r\n<li>内存分配</li>\r\n<li>地址映射（逻辑地址、物理地址）</li>\r\n<li>内存保护（上界地址值、下界地址值）</li>\r\n<li>内存扩充（虚拟存储技术）</li>\r\n</ul>\r\n<h3 id=\"设备管理\">设备管理</h3>\r\n<p><strong>原因</strong></p>\r\n<p>计算机外设<strong>种类众</strong>多，而且各种设备的<strong>传输速度差异很大</strong>，很难开发一种通用的、一致的解决方案。</p>\r\n<p><strong>基本功能</strong></p>\r\n<ul>\r\n<li>缓冲区管理</li>\r\n<li>设备分配</li>\r\n<li>设备驱动</li>\r\n<li>设备无关性</li>\r\n</ul>\r\n<h3 id=\"文件管理\">文件管理</h3>\r\n<blockquote>\r\n<p>在大多数应用中,文件是一个核心成分,除了实时应用和一些特殊应用外,<strong>应用程序的输入都是通过文件来实现的</strong></p>\r\n</blockquote>\r\n<p><strong>基本功能</strong></p>\r\n<ul>\r\n<li>文件<strong>存储空间</strong>的管理</li>\r\n<li>文件<strong>操</strong>作的一般管理</li>\r\n<li><strong>目录</strong>管理</li>\r\n<li>文件的<strong>读写</strong>管理</li>\r\n<li><strong>存取控制</strong></li>\r\n</ul>\r\n<h3 id=\"附加功能服务\">附加功能服务</h3>\r\n<p><strong>用户硬件接口</strong>:基本类型</p>\r\n<ul>\r\n<li>命令界面(DOS, Unix, windows命令行)</li>\r\n<li><strong>程序界面(系统调用界面)</strong></li>\r\n<li>图形界面(windows窗口, Linux的X-window)</li>\r\n</ul>\r\n<p><strong>网络</strong></p>\r\n<p>TCP/IP…</p>\r\n<p><strong>系统工具</strong></p>\r\n<ul>\r\n<li>shell: command line interface, ls, find/search,man</li>\r\n<li>系统管理: ps,shutdown,mount,mkdir</li>\r\n<li>软件开发: compilers, debuggers</li>\r\n</ul>\r\n<p><strong>OS 库</strong></p>\r\n<ul>\r\n<li>I/O: data buffering and formatting</li>\r\n<li>Math: common utilities, APIs: (cos,sin,abs,sqrt)</li>\r\n</ul>\r\n<p><strong>信息保护与安全</strong></p>\r\n<ul>\r\n<li><strong>访问控制</strong>\r\n<ul>\r\n<li>只有经过授权的用户才能访问系统用户</li>\r\n<li>只能访问属于自己的信息</li>\r\n</ul></li>\r\n<li><strong>信息流</strong>\r\n<ul>\r\n<li>限制系统中的信息流动方向</li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"关于unix和windows\">关于UNIX和windows</h2>\r\n<ul>\r\n<li><p><strong>SVR4</strong>是传统和现代版本的分水岭</p></li>\r\n<li><p>传统unix结构</p>\r\n<ul>\r\n<li><img src=\"https://raw.githubusercontent.com/sensuschung/wordpress_image/master/blog/202406100107701.png\" alt=\"image-20240610010755653\" style=\"zoom: 80%;\" /></li>\r\n</ul></li>\r\n<li><p>Windows系统的特点：微内核结构、客户服务器模型、支持线程、SMP、面向对象</p></li>\r\n<li><p>Solaris：可以在一个单独的Solaris内核实例中运行<u>创建并管理多个虚拟化</u>的操作系统，支持网际协议版本6（IPv6)，基于角色的访问控制（RBAC），支持32位的Intel\r\nx86</p></li>\r\n<li><p>macOS：基于FreeBSD系统采用“面向对象操作系统”的全面的操作系统</p></li>\r\n</ul>\r\n<h1 id=\"内存管理\">内存管理</h1>\r\n<h2 id=\"存储管理技术\">存储管理技术</h2>\r\n<ul>\r\n<li>单一连续区</li>\r\n<li>固定分区\r\n<ul>\r\n<li>大小相同</li>\r\n<li>大小不同</li>\r\n</ul></li>\r\n<li>可变分区\r\n<ul>\r\n<li>怎么管理：空闲分区表</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"固定分区地址映射\">固定分区地址映射</h3>\r\n<ul>\r\n<li>固定定位</li>\r\n<li>静态重定位</li>\r\n<li>动态重定位</li>\r\n</ul>\r\n<h3 id=\"可变分区分配算法\">可变分区分配算法</h3>\r\n<ul>\r\n<li><p>首次适配</p>\r\n<ul>\r\n<li><strong>对应回收算法</strong></li>\r\n</ul></li>\r\n<li><p>循环首次适应算法</p></li>\r\n<li><p>最佳适配</p></li>\r\n<li><p>最差适配</p></li>\r\n<li><p><strong>伙伴系统</strong></p></li>\r\n</ul>\r\n<h2 id=\"内存扩充技术\">内存扩充技术</h2>\r\n<ul>\r\n<li>覆盖</li>\r\n<li>交换技术</li>\r\n<li>多重分区\r\n<ul>\r\n<li>简单分页</li>\r\n</ul></li>\r\n</ul>\r\n<h1 id=\"文件系统\">文件系统</h1>\r\n<h2 id=\"磁盘结构和调度\">磁盘结构和调度</h2>\r\n<h3 id=\"磁盘结构\">磁盘结构</h3>\r\n<ul>\r\n<li>控制器通过移动臂移动磁头读写磁道上的数据。<strong>每面</strong>都有独立的磁头</li>\r\n<li>柱面: 所有盘片上的<strong>相同磁道</strong>组成柱面</li>\r\n</ul>\r\n<h3 id=\"磁盘时延\"><font color=\"#CC0000\">磁盘时延</font></h3>\r\n<details>\r\n<summary>\r\n具体计算\r\n</summary>\r\n<img src=\"https://raw.githubusercontent.com/sensuschung/wordpress_image/master/study/NIS2336/image-20240531151357537.png\" alt=\"1\">\r\n</details>\r\n<ul>\r\n<li><p>磁道优化</p>\r\n<details>\r\n<summary>\r\n<p>优化方案</p>\r\n</summary>\r\n<ul>\r\n<li>\r\n<p>所有磁道上的BPI 相同(“固定位密度”)</p>\r\n</li>\r\n<li>\r\n<p>磁盘容量更大</p>\r\n</li>\r\n<li>\r\n<p>越靠外圈的磁道包含的扇区越多</p>\r\n</li>\r\n<li>\r\n<p>磁盘转速固定，外磁道的速度比内磁道</p>\r\n</li>\r\n</ul>\r\n</details></li>\r\n</ul>\r\n<h4 id=\"硬盘的使用\">硬盘的使用</h4>\r\n<ul>\r\n<li><p>硬盘必须分区</p></li>\r\n<li><p>分区需用<u>某种文件系统</u>进行格式化</p></li>\r\n<li><p>在某些情况下，可以用快速格式化取代完全格式化</p></li>\r\n<li><p>为什么需要多分区</p></li>\r\n<li><p>磁盘分布</p></li>\r\n<li><p>MBR（位置）、4个主分区、多个逻辑分区</p></li>\r\n</ul>\r\n<h3 id=\"减少时延的方法\">减少时延的方法：</h3>\r\n<blockquote>\r\n<p>缓存/</p>\r\n<p>使用RAM磁盘/</p>\r\n<p>RAID/</p>\r\n<p>调度算法(读写头调度-&gt;调动磁头、元信息布置-&gt;怎么储存布置文件块)</p>\r\n</blockquote>\r\n<h4 id=\"高速缓存\">高速缓存</h4>\r\n<ul>\r\n<li><details>\r\n<summary>\r\n关于高速缓存\r\n</summary>\r\n<img src=\"https://raw.githubusercontent.com/sensuschung/wordpress_image/master/study/NIS2336/20240531153644.png\" alt=\"none\">\r\n</details></li>\r\n</ul>\r\n<h4 id=\"替换策略\"><font color=\"#CC0000\">替换策略</font>：</h4>\r\n<ul>\r\n<li>LRU</li>\r\n<li>LFU</li>\r\n<li>基于频率的替换算法</li>\r\n<li>优点：弱化集中访问对计数器的影响</li>\r\n<li>具体实现：栈，计数器，新老两个区</li>\r\n<li><img src=\"C:/Users/Windows11/AppData/Roaming/Typora/typora-user-images/image-20240603232956523.png\" alt=\"image-20240603232956523\" style=\"zoom:50%;\" /></li>\r\n<li>存在问题：新加入的块，如果很<u>快进入老区</u>，则没有竞争力，将很快被淘汰。</li>\r\n</ul>\r\n<h4 id=\"磁盘调度\"><font color=\"#CC0000\">磁盘调度</font></h4>\r\n<ul>\r\n<li>作用\r\n<ul>\r\n<li>提高有效的<strong>数据吞吐率</strong></li>\r\n<li>减少请求的<strong>平均等待时间</strong></li>\r\n</ul></li>\r\n<li>总结图\r\n<ul>\r\n<li><img src=\"https://raw.githubusercontent.com/sensuschung/wordpress_image/master/blog/202406032354849.png\" alt=\"image-20240603235447821\" style=\"zoom:80%;\" /></li>\r\n</ul></li>\r\n<li><font color=\"red\"> 常用调度策略</font></li>\r\n<li><strong>FCFS</strong>\r\n<ul>\r\n<li>按请求的<u>时间顺序</u>，依次进行服务</li>\r\n<li><img src=\"https://raw.githubusercontent.com/sensuschung/wordpress_image/master/blog/202406032338650.png\" alt=\"image-20240603233837629\" style=\"zoom:80%;\" /></li>\r\n<li>优点：\r\n<ul>\r\n<li>实现简单</li>\r\n<li>有大量进程竞争时，在性能上接近于<strong>随机调度</strong></li>\r\n</ul></li>\r\n<li>缺点\r\n<ul>\r\n<li><strong>寻道时间长</strong>，磁头<u>移动幅度大</u></li>\r\n</ul></li>\r\n<li>适合<strong>较轻负载</strong>的系统</li>\r\n</ul></li>\r\n<li><strong>SSTF最短寻道时间优先</strong>\r\n<ul>\r\n<li>优先响应寻道时间最短的请求</li>\r\n<li><img src=\"https://raw.githubusercontent.com/sensuschung/wordpress_image/master/blog/202406032343619.png\" alt=\"image-20240603234311601\" style=\"zoom:80%;\" /></li>\r\n<li>优点\r\n<ul>\r\n<li><strong>寻道时间</strong>较短，<strong>服务效率</strong>较高，服务<strong>平均等待时间</strong>较短</li>\r\n<li>提供比<u>FIFO</u>更高的效率</li>\r\n</ul></li>\r\n<li>缺点\r\n<ul>\r\n<li><strong>公平性</strong>差，可能会出现服务请求长期得不到服务，甚至饿死</li>\r\n<li><u>寻道时间</u>并不能真正实现最优。</li>\r\n</ul></li>\r\n<li>适合<strong>中度负载</strong>的系统</li>\r\n</ul></li>\r\n<li><strong>SCAN（电梯）算法</strong>\r\n<ul>\r\n<li>磁头<u>从一端出发向另一端移动</u>，移动过程中，发现有请求<u>对应磁头下的磁道</u>，就对该请求提供服务。到另一端后，开始反向移动，遇到请求进行服务</li>\r\n<li><img src=\"https://raw.githubusercontent.com/sensuschung/wordpress_image/master/blog/202406032347031.png\" alt=\"image-20240603234757011\" style=\"zoom:80%;\" /></li>\r\n<li>缺点：\r\n<ul>\r\n<li>每个请求的等待时间不均匀，且<strong>平均等待时间</strong>长</li>\r\n</ul></li>\r\n<li>优化\r\n<ul>\r\n<li><font color=\"blue\">磁头并不是每次扫描都移动到最远的磁道上</font>，一旦在当前方向上前面没有请求，就开始反向移动。</li>\r\n</ul></li>\r\n<li>比较适合磁盘<strong>负载较重</strong>的系统</li>\r\n</ul></li>\r\n<li><strong>C-SCAN</strong>\r\n<ul>\r\n<li>类似电梯算法。但需要<strong>从零道开始</strong>。</li>\r\n<li>磁头移动方向单一（从内到外）</li>\r\n</ul></li>\r\n<li>PRI进程优先级</li>\r\n<li>LIFO（后进先出）\r\n<ul>\r\n<li>局部性最好，资源利用率最高（等待时间少、缓存命中高）</li>\r\n</ul></li>\r\n<li>N-step-scan\r\n<ul>\r\n<li>把请求分为<u>长度为N</u>的多个队列；一次处理一个队列；新到的请求加到其他队列中。</li>\r\n<li>特性：<u>N较大时，等价于SCAN；N=1时，等价于FIFO</u></li>\r\n</ul></li>\r\n<li>FSCAN</li>\r\n</ul>\r\n<p>如何评价各个磁盘调度</p>\r\n<ul>\r\n<li>通常情况下，除非有很多请求在队列中，否则，各个算法<strong>没太大区别</strong></li>\r\n<li>操作系统可以<strong>以执行效率为目的</strong>来按一定的策略放置文件\r\n<ul>\r\n<li><strong>分布式系统</strong>把<u>频繁使用的文件</u>放在磁盘的中间位置</li>\r\n<li><strong>Ext2文件系统</strong>把<u>inode节点</u>放在磁盘靠近他们所<u>表示的数据块</u>的附近。</li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"raid\">RAID</h4>\r\n<blockquote>\r\n<p>作用</p>\r\n<ul>\r\n<li>通过<strong>并行</strong>提高性能</li>\r\n<li>通过<strong>冗余</strong>提高可靠性</li>\r\n</ul>\r\n</blockquote>\r\n<p>常用层次：RAID0,RAID1.RAID 5,RAID6</p>\r\n<p><img src=\"https://raw.githubusercontent.com/sensuschung/wordpress_image/master/blog/202406040007276.png\" alt=\"image-20240604000729248\" style=\"zoom:80%;\" /></p>\r\n<h3 id=\"磁盘调度器linux\">磁盘调度器（Linux）</h3>\r\n<h4 id=\"电梯调度器elevator\">电梯调度器(Elevator)</h4>\r\n<ul>\r\n<li>使用电梯算法：队列以<strong>块号</strong>进行排序</li>\r\n</ul>\r\n<blockquote>\r\n<p>有一个新的读写请求到达时，会依次考虑4个操作</p>\r\n<ul>\r\n<li>如果新请求与队列中的请求在<strong>同一磁盘扇区或相邻的扇区</strong>，则把新请求<strong>合并</strong>进队列</li>\r\n<li>如果队列中的请求已经<strong>很长时间</strong>了，则新请求将被插入到<strong>队列尾部</strong></li>\r\n<li>如果<strong>有合适位置</strong>，则新请求将被<strong>按顺序插入队列中</strong></li>\r\n<li>如果<strong>没有合适的位置</strong>，则新请求将被插入队列的<strong>尾部</strong></li>\r\n</ul>\r\n</blockquote>\r\n<p><font color=\"purple\">什么叫“请求已经很长时间了”</font></p>\r\n<h4 id=\"linux-时限io调度器\">Linux-时限IO调度器</h4>\r\n<ul>\r\n<li>作用：为了防止Linux Elevator出现<strong>长期延迟</strong>问题</li>\r\n<li>采用3个队列：读请求同时存在于1，2队列中；写请求同时存在于1，3队列中\r\n<ul>\r\n<li><img\r\nsrc=\"https://raw.githubusercontent.com/sensuschung/wordpress_image/master/blog/202406040004661.png\"\r\nalt=\"image-20240604000422642\" /></li>\r\n</ul></li>\r\n<li>读请求的<strong>默认时限</strong>是0.5秒，写请求5秒。</li>\r\n</ul>\r\n<h4 id=\"linux-预期io调度器\">Linux-预期IO调度器</h4>\r\n<ul>\r\n<li>对时限IO调度器的改进</li>\r\n<li>根据“<strong>局部性</strong>”原理，磁盘请求往往相邻</li>\r\n<li>当<strong>读请求</strong>被分派时，预期调度器的执行<u>将延迟6毫秒后再决定是否移动磁头到下一个位置</u></li>\r\n</ul>\r\n<h2 id=\"文件系统基本信息\">文件系统基本信息</h2>\r\n<h3 id=\"早期不足\">早期不足</h3>\r\n<details>\r\n<summary>\r\n自行展开\r\n</summary>\r\n<img src=\"https://raw.githubusercontent.com/sensuschung/wordpress_image/master/blog/202406040011374.png\" alt=\"image-20240604001140344\" style=\"zoom:67%;\" />\r\n</details>\r\n<blockquote>\r\n<p>而后由个人向<strong>系统级</strong>发展，以系统调用的形式向应用程序提供<strong>数据管理服务</strong></p>\r\n</blockquote>\r\n<h3 id=\"要求\">要求</h3>\r\n<h4 id=\"目标\">目标</h4>\r\n<p>方便用户管理自己的数据资源</p>\r\n<h4 id=\"基本要求\"><font color=\"red\">基本要求</font></h4>\r\n<ul>\r\n<li>文件<strong>按名</strong>存储</li>\r\n<li>文件有序组织，文件名<strong>分层次</strong>管理\r\n<ul>\r\n<li>如支持树形目录结构</li>\r\n</ul></li>\r\n<li>操作简单，<strong>存取效率高</strong>。</li>\r\n</ul>\r\n<h4 id=\"其他要求\">其他要求</h4>\r\n<ul>\r\n<li>支持<strong>多用户系统</strong>，多用户能够<u>共享同一个磁介质</u></li>\r\n<li>有一定的<strong>安全性</strong>保证，最好能进行<strong>数据恢复</strong></li>\r\n<li>存储空间的<strong>利用率</strong>高</li>\r\n</ul>\r\n<h3 id=\"基本概念-1\">基本概念</h3>\r\n<ul>\r\n<li><strong>文件</strong>：由<u>文件名字</u>标识的一组相关信息的集合。<strong>文件名</strong>是<u>字母或数字</u>组成的字母数字串</li>\r\n<li><strong>文件系统</strong>:</li>\r\n<li>软件观点：操作系统中，为用户和应用程序<u>管理文件</u>的<u>系统软件集合</u></li>\r\n<li>存储格式观点：文件系统是文件在<u>存储介质上保存和管理相关的约定</u>。在操作系统中，这种约定的实现也被称为文件系统。一种相关约定就对应一种文件系统，所以目前存在多种文件系统：FAT，FAT32，NTFS，EXT2等</li>\r\n<li><strong>一个操作系统</strong>除支持为它设计的文件系统外，<strong>还可能支持其他文件系统</strong></li>\r\n</ul>\r\n<h4 id=\"文件的命名\">文件的命名</h4>\r\n<ul>\r\n<li>文件名是<strong>字母或数字</strong>组成的字母数字串，在一些文件系统中还可能包含其它字符，如<strong>下划线</strong>等</li>\r\n<li>各种文件系统的文件命名规则略有不同，即文件名的<strong>格式和长度</strong>因系统而异。</li>\r\n</ul>\r\n<blockquote>\r\n<p>长度包括文件路径</p>\r\n</blockquote>\r\n<h4 id=\"文件的类型\">文件的类型</h4>\r\n<ul>\r\n<li><strong>普通文件</strong>：即前面所讨论的<u>存储在外存设备上</u>的数据文件。</li>\r\n<li><strong>目录文件</strong>：文件在管理普通数据文件时，需要保存其<u>相应的文件和属性</u>，这些属性以目录文件的形式存储在<u>磁盘</u>中。</li>\r\n<li><strong>块设备</strong>文件：在<u>unix/Linux</u>等操作系统中，对应于<u>磁盘、光盘或磁带</u>等块设备的文件。</li>\r\n<li><strong>字符设备</strong>文件：在<u>unix/Linux</u>等操作系统中，对应于终端、打印机等<u>字符设备</u>的文件</li>\r\n</ul>\r\n<h4 id=\"文件的属性\">文件的属性</h4>\r\n<p><img src=\"https://raw.githubusercontent.com/sensuschung/wordpress_image/master/blog/202406040026701.png\" alt=\"image-20240604002658680\" style=\"zoom:50%;\" /></p>\r\n<h3 id=\"优点\">优点</h3>\r\n<ul>\r\n<li><strong>用户使用方便</strong>：只要知道文件名，可存取信息，实现了<u>“按名存取”</u></li>\r\n<li><strong>安全可靠性</strong>：</li>\r\n<li>用户<u>通过文件系统才能</u>实现对文件的访问，故可防止对文件信息无意的破坏。</li>\r\n<li>而文件系统能提供各种<u>安全、保密和保护</u>措施</li>\r\n<li><strong>数据共享</strong>\r\n<ul>\r\n<li>移动存储设备</li>\r\n<li>各种形式的文件链接，不同的用户可以使用<u>同名或异名的同一文件</u></li>\r\n</ul></li>\r\n</ul>\r\n<h1 id=\"设备管理-1\">设备管理</h1>\r\n<p>如果没有设备管理会怎么样</p>\r\n<ul>\r\n<li>加重应用程序设计者的负担。</li>\r\n<li>应用程序的<strong><font color=\"red\">移植性</font></strong>比较差</li>\r\n<li>设备<strong>利用率</strong>低</li>\r\n</ul>\r\n<h2 id=\"基本概念-2\">基本概念</h2>\r\n<p>设备概念</p>\r\n<ul>\r\n<li>进行<u>实际输入输出操作</u>的<strong>物理设备</strong></li>\r\n<li><u>控制</u>物理设备的<strong>支持设备和支持部件</strong></li>\r\n<li>为<u>提高利用率</u>，形成的<strong>逻辑设备</strong>和<strong>虚拟设备</strong>。</li>\r\n</ul>\r\n<blockquote>\r\n<p>用高级编程语言操作的是什么设备</p>\r\n<p>是逻辑设备哦</p>\r\n</blockquote>\r\n<h3 id=\"分类\">分类</h3>\r\n<h4 id=\"外在功能\">外在功能</h4>\r\n<p>输入设备 // 输出设备 // 存储设备 // 供电设备 // 网络设备......</p>\r\n<h4 id=\"数据传输方式\">数据传输方式</h4>\r\n<ul>\r\n<li>块设备</li>\r\n<li>字符设备</li>\r\n<li>流设备</li>\r\n</ul>\r\n<h4 id=\"存在形式\">存在形式</h4>\r\n<ul>\r\n<li>物理设备</li>\r\n<li>逻辑设备</li>\r\n</ul>\r\n<h4 id=\"资源属性os管理\">资源属性（OS管理）</h4>\r\n<ul>\r\n<li>共享设备</li>\r\n<li>独占设备</li>\r\n<li>虚拟设备</li>\r\n</ul>\r\n<h3 id=\"要求-1\">要求</h3>\r\n<ul>\r\n<li>方便、统一的设备<u>使用界面</u>、</li>\r\n<li>提高<strong>外部设备利用率</strong>，尽量提高<strong>并行程度</strong></li>\r\n<li>实现<u>程序与设备</u>的<strong>无关</strong>性</li>\r\n</ul>\r\n<h3 id=\"功能\">功能</h3>\r\n<ul>\r\n<li>设备的<strong>配置</strong>和<u>资源分配</u></li>\r\n<li>设备的<strong>控制和驱动</strong></li>\r\n<li>系统与设备之间的<strong>缓冲</strong></li>\r\n<li>协调设备的<strong>调度和分配</strong></li>\r\n</ul>\r\n<h4 id=\"设备管理层次关系\">设备管理层次关系</h4>\r\n<ol type=\"1\">\r\n<li>底层通信（中断处理）\r\n<ul>\r\n<li>实现软件和硬件设备的通信</li>\r\n</ul></li>\r\n<li>设备驱动\r\n<ul>\r\n<li>接受来自<u>上层的抽象操作</u>请求，并负责操作的具体实施</li>\r\n<li>主要组成：与设备打交道的软件、<u>共享支持、缓冲区支持</u>等</li>\r\n</ul></li>\r\n<li>对用户层的I/O接口\r\n<ul>\r\n<li>每个I/O调用接口对应具体的<u>设备抽象操作</u></li>\r\n</ul></li>\r\n<li>使用设备的用户级程序\r\n<ul>\r\n<li>通过调用所提供的接口来实现对设备的使用或控制</li>\r\n</ul></li>\r\n</ol>\r\n<h2 id=\"时钟中断\">时钟中断</h2>\r\n<blockquote>\r\n<p><strong>硬件时钟</strong>：由<strong>硬件脉冲</strong>形成，经<strong>计数器和定时器</strong>产生定时中断。</p>\r\n</blockquote>\r\n<blockquote>\r\n<p><strong>软件时钟</strong>：由<strong>程序模拟</strong>的时钟，可以产生<font color=\"red\">软中断</font>。</p>\r\n</blockquote>\r\n<h3 id=\"分类-1\">分类</h3>\r\n<ul>\r\n<li><strong>系统时钟</strong>（软时钟）：控制指令执行</li>\r\n<li><strong>日历时钟</strong>（由软件根据<u>实时时钟</u>设置）</li>\r\n<li><strong>实时时钟</strong> (Real-time clock):\r\n提醒处理器有其他事情要做（也就是产生<u>硬件中断</u>）</li>\r\n</ul>\r\n<p>系统时钟的维护</p>\r\n<p>在计算机<strong>没有启动</strong>时。<u>主板</u>上包含了一个类似<u><strong>石英钟</strong>的物理时钟</u>在记录时间的流逝和变化</p>\r\n<p>系统<strong>启动</strong>时，OS从<u>物理时钟</u>读取当前时间，保存在<u>全局变量</u>里。时间度量单位为Tick。</p>\r\n<p>每过一个Tick（即一个计时单位，由操作系统定义），<u>时钟芯片都会向CPU发送一个时钟中断</u>。</p>\r\n<h3 id=\"举例\">举例</h3>\r\n<ul>\r\n<li>紧急任务（1个tick，例如1ms）：\r\n<ul>\r\n<li><u>运行进程</u>的优先级调整</li>\r\n<li>终端<u>延时</u>处理</li>\r\n</ul></li>\r\n<li>非紧急任务（例如，1秒）：\r\n<ul>\r\n<li>非运行态进程的优先级调整</li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"os控制io操作\">OS控制IO操作</h2>\r\n<h3 id=\"硬件组成\">硬件组成</h3>\r\n<ul>\r\n<li><strong>机械部件</strong>（<strong>实施</strong>部件）：具体实现设备的操作</li>\r\n<li><strong>电子部件</strong>（<strong>接口</strong>部件）：又叫设备控制器\r\n<ul>\r\n<li>直接外接用于<u>控制和数据通信</u>的<u>电缆线</u></li>\r\n<li>操作系统与<u>控制器</u>直接打交道，发送操作命令，或收发数据</li>\r\n<li>控制器接收OS发来的操作指令，控制机械部件完成相应操作</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"资源分配\">资源分配</h3>\r\n<h4 id=\"io地址\">I/O地址</h4>\r\n<ul>\r\n<li><u>设备内部</u>的I/O编址：局限于单个设备</li>\r\n<li><u>整个系统</u>I/O编址：需要把单个设备的I/O编址<strong>映射</strong>到系统全局编址\r\n<ul>\r\n<li>与内存统一编址：同一般的内存访问操作</li>\r\n<li>与内存分开编址：需要使用<u>专门的I/O指令</u>访问设备控制器的寄存器</li>\r\n</ul></li>\r\n</ul>\r\n<blockquote>\r\n<p>在设备接入之后，需要<strong>分配合适的I/O地址</strong>。设备内部的I/O地址要<strong>映射到所分配的I/O地址上</strong></p>\r\n</blockquote>\r\n<h4 id=\"io中断请求\">I/O中断请求</h4>\r\n<ul>\r\n<li>中断控制器支持的<strong>中断数量有限</strong>，每个进行了编号</li>\r\n<li>设备接入系统后，需要<strong>分配中断号</strong>。一般情况下，多个设备<strong>不能共享</strong>同一中断号</li>\r\n</ul>\r\n<blockquote>\r\n<p>没有合适的中断编号设备就<strong>不能正常工作</strong>。</p>\r\n</blockquote>\r\n<h4 id=\"dma数据传输通道\">DMA数据传输通道</h4>\r\n<p>关于IO通道</p>\r\n<ul>\r\n<li>I/O通道是一种硬件设施，带有<u>专用处理器</u>的，是有很强I/O处理功能的智能部件</li>\r\n<li>可以<font color=\"blue\">独立地完成系统处理器交付的I/O操作任务</font>，通道具有自己<strong>专门的指令集</strong>，即<strong>通道指令</strong></li>\r\n<li>通道执行来自处理器的通道程序，完成后只需<u>向系统处理器发出中断</u>，请求结束</li>\r\n</ul>\r\n<p>IO通道分类</p>\r\n<ul>\r\n<li><strong>字节多路通道</strong>\r\n<ul>\r\n<li>用于连接<font color=\"blue\">大量</font><font color=\"red\">低、中速</font>的I/O设备，每次传输一个字节</li>\r\n<li>以<strong>字节为单位</strong>交叉地工作，<font color=\"red\">当为一台设备传送一个字节后，立即转去为另一台设备传送一个字节</font></li>\r\n</ul></li>\r\n<li><strong>选择通道</strong>\r\n<ul>\r\n<li>用于支持<font color=\"red\">高速设备</font>（如磁盘），每次只与<font color=\"blue\">一个设备</font>进行数据传输</li>\r\n<li>数据传输是<strong>以块为单位</strong>，每次可以传输一批数据</li>\r\n<li><font color=\"red\">每当一个输入输出操作请求完成后，再选择与通道相连接的另一设备</font></li>\r\n</ul></li>\r\n<li><strong>成组多路通道</strong>\r\n<ul>\r\n<li>以<strong>分时方式</strong>同时执行几道通道程序，分别实现与<font color=\"blue\">几个高速设备</font>的数据传输</li>\r\n<li>实质是<font color=\"red\">对通道程序采用多道程序设计技术的硬件实现</font>\r\n。</li>\r\n</ul></li>\r\n</ul>\r\n<p>DMA传输通道</p>\r\n<ul>\r\n<li><strong>内存和I/O设备之间</strong>的自动化数据通路，在主存和I/O设备之间成块传送数据过程中，<font color=\"red\">不需要CPU干预</font>，CPU资源的利用率再次得到提高</li>\r\n<li>DMA不仅设有中断机构，而且，还增加了DMA<strong>传输控制机构</strong>（类似于CPU)</li>\r\n</ul>\r\n<h4 id=\"io缓冲区\">I/O缓冲区</h4>\r\n<ul>\r\n<li><strong>需求</strong>\r\n<ul>\r\n<li>提高CPU和外设的<u>并行度</u></li>\r\n<li>缓解<u>外设速度慢</u>的瓶颈</li>\r\n</ul></li>\r\n<li>分类\r\n<ul>\r\n<li>硬件缓冲：有些设备中会包含专门的硬件寄存器等用于缓冲。</li>\r\n<li>软件缓冲：直接在主存中\r\n<ul>\r\n<li>单缓冲：一个缓冲，外设和CPU<u>互斥进行操作</u></li>\r\n<li>双缓冲：设置两个缓冲区，交替使用</li>\r\n<li>循环缓冲：类似于<u>循环队列</u>，依次使用</li>\r\n<li><font color=\"red\">缓冲池</font>：系统维护一组大小相同的缓冲区，进程和设备<strong>按需要申请</strong>，使用完后重新归入缓冲池中</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"资源控制\">资源控制</h3>\r\n<p>使用<strong>设备控制表（DCT）</strong>控制设备。</p>\r\n<h4 id=\"设备控制表dct\">设备控制表（DCT）</h4>\r\n<ul>\r\n<li><p>作用：将抽象的<strong>I/O操作</strong>映射到实际的设备</p></li>\r\n<li><p>记录内容：</p>\r\n<ul>\r\n<li>抽象设备描述</li>\r\n<li>实际<u>设备地址</u></li>\r\n<li>驱动程序参数等</li>\r\n</ul></li>\r\n<li><details>\r\n<p>]</p>\r\n<summary>\r\n<p>示例</p>\r\n</summary>\r\n<pre><code>&lt;img src=&quot;https://raw.githubusercontent.com/sensuschung/wordpress_image/master/blog/202406050040213.png&quot; alt=&quot;image-20240605004011179&quot; style=&quot;zoom:80%;&quot; /&gt;</code></pre>\r\n</details></li>\r\n</ul>\r\n<h4 id=\"设备开关表\">设备开关表</h4>\r\n<ul>\r\n<li>内容\r\n<ul>\r\n<li>·设备号（对应于DCT中的设备号）</li>\r\n<li><font color=\"red\">打开设备的程序入口地址</font></li>\r\n<li><font color=\"red\">关闭设备的程序入口地址</font></li>\r\n</ul></li>\r\n</ul>\r\n<p><img src=\"C:/Users/zhonghy/AppData/Roaming/Typora/typora-user-images/image-20240605100921648.png\" alt=\"image-20240605100921648\" style=\"zoom: 28%;\" /></p>\r\n<h2 id=\"unix设备的管理分配\">Unix设备的管理分配</h2>\r\n<h3 id=\"管理层次\">管理层次</h3>\r\n<p>设备文件-&gt;设备开关表-&gt;驱动程序-&gt;I/O指令（控制寄存器）-&gt;硬件</p>\r\n<h3 id=\"设备分配\">设备分配</h3>\r\n<h4 id=\"功能-1\">功能</h4>\r\n<ul>\r\n<li>为进程或作业分配所需的设备</li>\r\n<li><font color=\"red\">充分发挥设备的使用效率，尽可能避免<strong>死锁</strong></font></li>\r\n</ul>\r\n<h4 id=\"分配方式\">分配方式</h4>\r\n<ul>\r\n<li>静态分配：\r\n<ul>\r\n<li>作业开始运行时，一次性分配给所有可能使用到的设备</li>\r\n<li>设备利用率低</li>\r\n<li>简单，<u>不会出现死锁</u></li>\r\n</ul></li>\r\n<li>动态分配\r\n<ul>\r\n<li>进程使用设备时再进行相应分配</li>\r\n<li>设备利用高，<u>可能会出现死锁</u></li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"设备请求管理\">设备请求管理</h4>\r\n<ul>\r\n<li>要使用设备时<font color=\"red\">必须</font>提供进行<u>I/O操作的有关信息</u>，指出执行I/O的逻辑<u>设备名</u>（如设备号）、<u>操作类型</u>、传送数据的<u>数目</u>、<u>信息源或目的地址</u>等。</li>\r\n<li>存放进行I/O操作的信息的结构称为<font color=\"blue\">\r\n<strong>I/O请求块</strong> </font>\r\n<ul>\r\n<li>在UNIX系统中，系统的I/O请求块的内容是<font color=\"red\">包含在缓冲区控制块buf</font>中</li>\r\n</ul></li>\r\n</ul>\r\n<blockquote>\r\n<p>在请求I/O时，首先<strong>请求分配缓冲区</strong>，然后把与操作有关的信息写到buf中，并把这个<strong>buf挂到请求设备的I/O请求队列</strong>中去</p>\r\n</blockquote>\r\n<ul>\r\n<li></li>\r\n</ul>\r\n<h4 id=\"分配原则\">分配原则</h4>\r\n<ul>\r\n<li>独占设备：同时只能分配给<strong>一个请求进程</strong>。</li>\r\n<li>共享设备：同时可以将一个设备分配给<strong>多个请求进程</strong>。</li>\r\n<li>虚拟设备：用一个逻辑设备来<u>同时模拟</u><strong>多个独占</strong>设备，达到设备共享的目的，<u>提高设备利用率</u>。</li>\r\n</ul>\r\n<h4 id=\"分配算法\">分配算法</h4>\r\n<h5 id=\"先请求先服务\">先请求先服务</h5>\r\n<ul>\r\n<li>系统按先后次序组成I/O请求队列，每个设备一个队列</li>\r\n<li>当新的I/O请求块生成后，把该块挂在相应设备的I/O请求队列的<u>队尾</u></li>\r\n<li><strong>设备空闲时</strong>，从该设备的I/O请求队列的队首取出一个请求块，并按这个请求块的要求进行I/O操作</li>\r\n</ul>\r\n<h5 id=\"按进程优先权确定服务次序\">按进程优先权确定服务次序</h5>\r\n<ul>\r\n<li>系统按请求进程的优先级由高到低次序组成I/O请求队列，每个设备一个队列。（多队列）</li>\r\n<li>当新的I/O请求块生成后，根据请求优先级把该块挂在相应设备的I/O请求队列中的<u>合适位置</u>。</li>\r\n<li>设备空闲时，从该设备的I/O请求队列的队首取出一个请求块，并按这个请求块的要求进行I/O操作</li>\r\n</ul>\r\n<h3 id=\"上层统一接口\">上层统一接口</h3>\r\n<blockquote>\r\n<ul>\r\n<li>操作系统的设备管理需要<strong>隐藏</strong>设备的操作细节</li>\r\n<li>解决问题\r\n<ul>\r\n<li>如何用统一的方式来<strong>标示</strong>设备</li>\r\n<li>如何用统一的方法来表示设备的<strong>不同操作</strong></li>\r\n</ul></li>\r\n</ul>\r\n</blockquote>\r\n<h4 id=\"实现思路\">实现思路</h4>\r\n<ul>\r\n<li>操作系统对上提供若干<font color=\"red\">高级I/O系统调用</font>(getc,\r\nputc, read , write ,seek, open, close等)\r\n<ul>\r\n<li>这些调用接口同<u>普通文件的调用接口</u></li>\r\n<li>I/O系统调用对应抽象的I/O操作，包含对I/O设备的控制：<font color=\"red\">请求、响应、处理控制、缓冲等</font></li>\r\n<li>对这些抽象I/O操作请求，不同的设备具有不同的理解，对应<u>不同的设备动作</u></li>\r\n</ul></li>\r\n<li><strong>通过<font color=\"red\">抽象的I/O操作</font>把应用程序与复杂的I/O设备控制隔离开来。</strong></li>\r\n</ul>\r\n<h3 id=\"设备的命名\">设备的命名</h3>\r\n<p>以文件名的形式来表示,这些文件叫设备文件</p>\r\n<p>把设备文件和对应的设备（或<u>设备驱动程序</u>）联系起来的是设备文件的两个属性:</p>\r\n<ul>\r\n<li>主设备号：<strong>通过主设备号就可以找到相应的设备驱动程序</strong>。同种类型的设备如果驱动相同，<strong>主设备号可以相同</strong>。</li>\r\n<li>次设备号：它作为传给驱动程序的<u>参数</u>指定<strong>具体的物理设备</strong>。</li>\r\n</ul>\r\n<h3 id=\"缓冲区管理\">缓冲区管理</h3>\r\n<ul>\r\n<li>设置了<u>多种队列</u>对所有缓冲区进行管理</li>\r\n<li>因为buf记录了与缓冲区有关的各种管理信息，所以缓冲区管理队列<font color=\"red\">实际上是缓存控制块buf队列</font>。</li>\r\n</ul>\r\n<h4 id=\"缓冲控制块buf\">缓冲控制块buf</h4>\r\n<p>存储缓冲区信息、IO请求、执行结果</p>\r\n<h4 id=\"buf队列\">buf队列</h4>\r\n<ul>\r\n<li>自由（空闲）buf 队列：FIFO</li>\r\n<li>设备缓冲区队列：双向队列；被分配用于读、写某个设备的<strong>字符块</strong></li>\r\n<li>空设备队列（NODEV队列）：特殊设备/无对应的实际设备（只有对应的<font color=\"red\">特殊内容</font>）\r\n<ul>\r\n<li>为程序传递参数</li>\r\n<li>存放文件系统的<strong>资源管理块</strong></li>\r\n</ul></li>\r\n</ul>\r\n<blockquote>\r\n<p>系统初始化时会把所有的空间缓冲区buf同时放在<strong>自由buf和NODEV</strong>上</p>\r\n</blockquote>\r\n<ul>\r\n<li>设备I/O请求队列：每个<strong>块设备</strong>有一个I/O请求队列（iobuf，<strong>单向连接</strong>）</li>\r\n</ul>\r\n<h4 id=\"缓冲区之间关系\">==缓冲区之间关系==</h4>\r\n<p><img src=\"https://raw.githubusercontent.com/sensuschung/wordpress_image/master/study/NIS2336/image-20240605102419557.png\" alt=\"image-20240605102419557\" style=\"zoom:67%;\" /></p>\r\n<h4 id=\"管理算法\">管理算法</h4>\r\n<p>采用LRU算法</p>\r\n<ul>\r\n<li>一个缓存刚分配用于读写某一块设备，buf的b_flags含有<strong>B_BUSY标志</strong>。它一定位于相应<strong>设备buf队列，不在自由队列</strong>。</li>\r\n<li>一旦读写完成，就释放缓存，<strong>清B_BUSY标志</strong>。送入自由队列尾，但<strong>仍留在原设备队列</strong>。</li>\r\n</ul>\r\n<p><strong><font color = \"red\">优点</font></strong>：</p>\r\n<ul>\r\n<li><strong>避免了重复I/O</strong>：只要还要重复使用原设备队列中该缓存内容，就只要简单地将其从自由队列抽出即可</li>\r\n<li><strong>实现延迟写</strong>:实现了异步延迟写机制</li>\r\n</ul>\r\n<h3 id=\"字符设备管理\">字符设备管理</h3>\r\n<ul>\r\n<li>需要两个寄存器\r\n<ul>\r\n<li><strong>控制状态</strong>寄存器</li>\r\n<li><strong>数据缓冲</strong>寄存器</li>\r\n</ul></li>\r\n<li>作为一个特殊文件来处理</li>\r\n<li>数据流与控制流\r\n<ul>\r\n<li><img src=\"https://raw.githubusercontent.com/sensuschung/wordpress_image/master/study/NIS2336/image-20240605103747894.png\" alt=\"image-20240605103747894\" style=\"zoom:33%;\" /></li>\r\n</ul></li>\r\n<li>缓冲区非常小；三种队列：原始（读入）、规范（转换）、输出（写出）</li>\r\n</ul>\r\n<h2 id=\"linux设备管理\">Linux设备管理</h2>\r\n<p><img src=\"https://raw.githubusercontent.com/sensuschung/wordpress_image/master/study/NIS2336/image-20240605104202968.png\" alt=\"image-20240605104202968\" style=\"zoom:50%;\" /></p>\r\n<h3 id=\"接口管理\">接口管理</h3>\r\n<ul>\r\n<li>每台设备用一个特殊设备文件来表示。/dev/hda表示第一个磁盘，/dev/hda1表示第一个磁盘的第一个分区。（device）</li>\r\n<li>通过<strong>访问文件的接口</strong>就能实现对设备的访问。</li>\r\n</ul>\r\n<h3 id=\"驱动程序\">驱动程序</h3>\r\n<ul>\r\n<li>运行在<strong>核心态</strong></li>\r\n<li>对应用层提供标准接口</li>\r\n<li>灵活性\r\n<ul>\r\n<li><strong>可配置，可以通过配置选择特定的驱动程序编译到内核中。</strong></li>\r\n<li>也可以编译成<strong>模块，</strong>实现动态加载</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"字符设备\">字符设备</h3>\r\n<ul>\r\n<li><font color =red>字符设备矢量表</font>\r\n<ul>\r\n<li>每一项对应一个设备。每一项的信息包含<strong>设备控制块指针</strong>，以及各种抽象操作的<strong>实现函数</strong></li>\r\n</ul></li>\r\n<li><font color =red>虚拟文件系统</font>\r\n<ul>\r\n<li>能够实现<strong>文件操作到实现函数的映射</strong></li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"块设备\">块设备</h3>\r\n<ul>\r\n<li>与字符设备的相同点\r\n<ul>\r\n<li>对上提供文件操作类似的接口</li>\r\n<li>存在与字符设备矢量表功能类似的<strong>块设备矢量表</strong></li>\r\n</ul></li>\r\n<li>与字符设备的差别\r\n<ul>\r\n<li>与<font color =red>高速缓冲区间</font>存在接口</li>\r\n<li>需要管理相应的<font color =red>队列。</font></li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"网络\">网络</h3>\r\n<ul>\r\n<li>网络设备是<u>发送和接收数据包</u>的实体。</li>\r\n<li>通常对应于<strong>网卡</strong></li>\r\n</ul>\r\n<h1 id=\"遗留作业\">遗留作业</h1>\r\n<h2 id=\"概论\">概论</h2>\r\n<p>Spooling和内存缓冲技术的区别</p>\r\n<p>Spooling（Simultaneous Peripheral Operations\r\nOn-Line）和内存缓冲技术是用来提高计算机系统性能的两种不同技术：</p>\r\n<ol type=\"1\">\r\n<li><strong>Spooling</strong>：\r\n<ul>\r\n<li><strong>定义</strong>：Spooling\r\n是一种技术，它允许计算机在执行多个任务时，将这些任务的输入和输出数据暂时存储在磁盘或其他介质上，而不是直接在主内存中处理。</li>\r\n<li><strong>作用</strong>：通过将输入/输出数据缓冲到磁盘上的临时存储区域，系统可以更高效地管理多个任务的输入输出，避免了需要等待长时间的磁盘访问操作。</li>\r\n</ul></li>\r\n<li><strong>内存缓冲技术</strong>：\r\n<ul>\r\n<li><strong>定义</strong>：内存缓冲技术是一种通过使用计算机内存中的缓冲区来存储数据，从而改善数据传输和处理效率的技术。</li>\r\n<li><strong>作用</strong>：内存缓冲可以在数据传输和处理过程中，暂时存储数据，减少因为数据传输速度不匹配而导致的等待时间，提高系统性能和响应速度。</li>\r\n</ul></li>\r\n</ol>\r\n<p><strong>区别</strong>： - <strong>存储位置</strong>：Spooling\r\n将数据存储在磁盘或其他非易失性介质上，而内存缓冲技术将数据存储在计算机内存中。\r\n- <strong>使用场景</strong>：Spooling\r\n主要用于管理和调度多个任务的输入输出，而内存缓冲技术更多用于优化数据传输和处理效率。\r\n- <strong>实现方式</strong>：Spooling\r\n通常需要特定的操作系统支持和软件实现，而内存缓冲可以通过应用程序或操作系统本身实现。</p>\r\n<p>总之，这两种技术都旨在提高计算机系统的效率和响应速度，但它们的应用场景和实现方式有所不同。</p>\r\n<p>Spooling和内存缓冲技术的区别</p>\r\n<p>Spooling（假脱机）和真正的脱机技术是计算机领域中两种不同的数据处理和管理方式：</p>\r\n<ol type=\"1\">\r\n<li><strong>Spooling（假脱机）</strong>：\r\n<ul>\r\n<li><strong>定义</strong>：Spooling\r\n是一种技术，它允许计算机系统将任务的输入和输出数据暂时存储在磁盘或其他介质上，而不是直接在主内存中处理。这种方式使得系统可以并行处理多个任务的输入输出，而不会因为等待磁盘访问而导致性能下降。</li>\r\n<li><strong>特点</strong>：Spooling\r\n本质上是一种虚拟的脱机操作，因为它并不真正将数据传输到物理脱机设备上，而是将数据缓存到临时存储区域（如磁盘）以便后续处理。</li>\r\n</ul></li>\r\n<li><strong>真正的脱机技术</strong>：\r\n<ul>\r\n<li><strong>定义</strong>：真正的脱机技术涉及将数据完全从计算机系统中取出，并通过物理介质（如磁带或光盘）存储到脱机设备中，然后在需要时再将数据取回计算机系统进行处理。</li>\r\n<li><strong>特点</strong>：脱机技术通常用于大规模数据存储和备份，它可以有效地释放计算机系统的资源，因为数据不需要在系统活动时持续占用内存或处理器。</li>\r\n</ul></li>\r\n</ol>\r\n<p><strong>区别</strong>： - <strong>操作对象</strong>：Spooling\r\n是针对任务的输入输出数据进行缓冲和管理，而真正的脱机技术则是针对大量数据的物理存储和处理。\r\n- <strong>存储介质</strong>：Spooling\r\n使用磁盘等非易失性存储介质作为缓冲区，而脱机技术使用磁带、光盘等物理介质作为数据的永久存储。\r\n- <strong>应用场景</strong>：Spooling\r\n主要用于多任务并发处理的输入输出优化，而脱机技术则更多用于数据备份、长期存储和数据迁移等大规模数据处理场景。</p>\r\n<p>总结来说，Spooling\r\n是一种虚拟的脱机操作技术，通过缓冲数据到磁盘上来提高系统效率；而真正的脱机技术则是实际将数据存储到物理脱机设备上，用于长期存储和备份。</p>\r\n<p>Unix系统的基本结构分为哪几层</p>\r\n<details>\r\n<summary>\r\nUnix系统的基本结构\r\n</summary>\r\n<p>\r\n<strong>硬件层：</strong>\r\n包括计算机的物理硬件，如CPU、内存、磁盘驱动器、网络接口等。它是Unix系统赖以运行的基础。\r\n</p>\r\n<p>\r\n<strong>内核层：</strong>\r\n内核是Unix系统的核心部分，负责管理硬件资源，并为上层软件提供服务。内核主要功能包括进程管理、内存管理、文件系统管理、设备驱动、系统调用接口等。\r\n</p>\r\n<p>\r\n<strong>系统调用接口层：</strong> 系统调用接口（System Call Interface,\r\nSCI）是用户进程和内核之间的桥梁。它提供一组标准的接口，允许用户进程请求内核服务，如文件操作、进程控制、内存分配等。\r\n</p>\r\n<p>\r\n<strong>库函数层：</strong>\r\n库函数层由标准C库（libc）等组成，提供常用的编程接口和工具函数。库函数通常封装系统调用，简化应用程序开发。\r\n</p>\r\n<p>\r\n<strong>用户命令和应用程序层：</strong>\r\n包括各种用户命令、系统管理工具和应用程序。这一层直接与用户交互，为用户提供功能强大的操作和管理工具。常见的用户命令有<code>ls</code>、<code>cp</code>、<code>mv</code>等。\r\n</p>\r\n<p>\r\n<strong>用户层：</strong>\r\n用户层是Unix系统的最外层，包括最终用户和系统管理员，他们通过命令行界面（CLI）或图形用户界面（GUI）与系统交互。\r\n</p>\r\n</details>\r\n<h2 id=\"磁盘调度-1\">磁盘调度</h2>\r\n<ul>\r\n<li><strong>磁盘调度</strong></li>\r\n</ul>\r\n<p><img src=\"https://raw.githubusercontent.com/sensuschung/wordpress_image/master/blog/202406032358632.png\" alt=\"image-20240603235836608\" style=\"zoom:80%;\" /></p>\r\n<ol type=\"1\">\r\n<li></li>\r\n</ol>\r\n","text":"可能考点！！！！！！ 1.计算题： 扇区读写时间 信号量 周转时间 2.重点 概述 spooling 缓冲/中断/DMA 操作系统的特征 操作系统的功能 操作系...","permalink":"/post/NIS2334","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"study","slug":"study","count":5,"path":"api/categories/study.json"},{"name":"class","slug":"study/class","count":3,"path":"api/categories/study/class.json"}],"tags":[{"name":"review","slug":"review","count":3,"path":"api/tags/review.json"},{"name":"2023-2024Spring","slug":"2023-2024Spring","count":3,"path":"api/tags/2023-2024Spring.json"},{"name":"OS","slug":"OS","count":1,"path":"api/tags/OS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">基本概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E8%AE%A1%E7%9B%AE%E6%A0%87\"><span class=\"toc-text\">设计目标</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%B0%E4%BD%8D%E5%92%8C%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">地位和作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">操作系统概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E4%B8%9A%E4%B8%8E%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">作业与进程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">操作系统的特征</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%96%B0%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">现代操作系统的新特征</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BE%AE%E5%86%85%E6%A0%B8%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">微内核体系结构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">多线程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E7%A7%B0%E5%A4%9A%E5%A4%84%E7%90%86smp\"><span class=\"toc-text\">对称多处理SMP</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F\"><span class=\"toc-text\">分布式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">面向对象设计</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E8%A6%81%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">主要解决问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%96%AD\"><span class=\"toc-text\">中断</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dma\"><span class=\"toc-text\">DMA</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%B9%E5%A4%84%E7%90%86\"><span class=\"toc-text\">批处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E9%81%93%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">多道程序设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93%E5%88%A9%E5%BC%8A\"><span class=\"toc-text\">总结利弊</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#spooling\"><span class=\"toc-text\">SPOOLING</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">现代操作系统类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%97%B6%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">分时系统</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%97%B6%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">&#x3D;&#x3D;实时系统&#x3D;&#x3D;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AE%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">微机操作系统</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E5%A4%84%E7%90%86%E6%9C%BA%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">多处理机系统</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">网络操作系统</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">分布式操作系统</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">操作系统的功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E6%9C%BA%E7%AE%A1%E7%90%86%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6\"><span class=\"toc-text\">处理机管理（进程调度）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">存储管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">设备管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">文件管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%99%84%E5%8A%A0%E5%8A%9F%E8%83%BD%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">附加功能服务</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8Eunix%E5%92%8Cwindows\"><span class=\"toc-text\">关于UNIX和windows</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">内存管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">存储管理技术</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%BA%E5%AE%9A%E5%88%86%E5%8C%BA%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">固定分区地址映射</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E5%8F%98%E5%88%86%E5%8C%BA%E5%88%86%E9%85%8D%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">可变分区分配算法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E6%89%A9%E5%85%85%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">内存扩充技术</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">文件系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A3%81%E7%9B%98%E7%BB%93%E6%9E%84%E5%92%8C%E8%B0%83%E5%BA%A6\"><span class=\"toc-text\">磁盘结构和调度</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A3%81%E7%9B%98%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">磁盘结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A3%81%E7%9B%98%E6%97%B6%E5%BB%B6\"><span class=\"toc-text\">磁盘时延</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A1%AC%E7%9B%98%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">硬盘的使用</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%8F%E5%B0%91%E6%97%B6%E5%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">减少时延的方法：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">高速缓存</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9B%BF%E6%8D%A2%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">替换策略：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A3%81%E7%9B%98%E8%B0%83%E5%BA%A6\"><span class=\"toc-text\">磁盘调度</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#raid\"><span class=\"toc-text\">RAID</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A3%81%E7%9B%98%E8%B0%83%E5%BA%A6%E5%99%A8linux\"><span class=\"toc-text\">磁盘调度器（Linux）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%B5%E6%A2%AF%E8%B0%83%E5%BA%A6%E5%99%A8elevator\"><span class=\"toc-text\">电梯调度器(Elevator)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#linux-%E6%97%B6%E9%99%90io%E8%B0%83%E5%BA%A6%E5%99%A8\"><span class=\"toc-text\">Linux-时限IO调度器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#linux-%E9%A2%84%E6%9C%9Fio%E8%B0%83%E5%BA%A6%E5%99%A8\"><span class=\"toc-text\">Linux-预期IO调度器</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">文件系统基本信息</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A9%E6%9C%9F%E4%B8%8D%E8%B6%B3\"><span class=\"toc-text\">早期不足</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">要求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E6%A0%87\"><span class=\"toc-text\">目标</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">基本要求</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">其他要求</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5-1\"><span class=\"toc-text\">基本概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E7%9A%84%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">文件的命名</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E7%9A%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">文件的类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E7%9A%84%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">文件的属性</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">优点</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86-1\"><span class=\"toc-text\">设备管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5-2\"><span class=\"toc-text\">基本概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">分类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%96%E5%9C%A8%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">外在功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">数据传输方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%9C%A8%E5%BD%A2%E5%BC%8F\"><span class=\"toc-text\">存在形式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B5%84%E6%BA%90%E5%B1%9E%E6%80%A7os%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">资源属性（OS管理）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A6%81%E6%B1%82-1\"><span class=\"toc-text\">要求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86%E5%B1%82%E6%AC%A1%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">设备管理层次关系</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%92%9F%E4%B8%AD%E6%96%AD\"><span class=\"toc-text\">时钟中断</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E7%B1%BB-1\"><span class=\"toc-text\">分类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BE%E4%BE%8B\"><span class=\"toc-text\">举例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#os%E6%8E%A7%E5%88%B6io%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">OS控制IO操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A1%AC%E4%BB%B6%E7%BB%84%E6%88%90\"><span class=\"toc-text\">硬件组成</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B5%84%E6%BA%90%E5%88%86%E9%85%8D\"><span class=\"toc-text\">资源分配</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#io%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">I&#x2F;O地址</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#io%E4%B8%AD%E6%96%AD%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">I&#x2F;O中断请求</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#dma%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E9%80%9A%E9%81%93\"><span class=\"toc-text\">DMA数据传输通道</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#io%E7%BC%93%E5%86%B2%E5%8C%BA\"><span class=\"toc-text\">I&#x2F;O缓冲区</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B5%84%E6%BA%90%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">资源控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E5%A4%87%E6%8E%A7%E5%88%B6%E8%A1%A8dct\"><span class=\"toc-text\">设备控制表（DCT）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E5%A4%87%E5%BC%80%E5%85%B3%E8%A1%A8\"><span class=\"toc-text\">设备开关表</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#unix%E8%AE%BE%E5%A4%87%E7%9A%84%E7%AE%A1%E7%90%86%E5%88%86%E9%85%8D\"><span class=\"toc-text\">Unix设备的管理分配</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%A1%E7%90%86%E5%B1%82%E6%AC%A1\"><span class=\"toc-text\">管理层次</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E5%A4%87%E5%88%86%E9%85%8D\"><span class=\"toc-text\">设备分配</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%9F%E8%83%BD-1\"><span class=\"toc-text\">功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%86%E9%85%8D%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">分配方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E5%A4%87%E8%AF%B7%E6%B1%82%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">设备请求管理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%86%E9%85%8D%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">分配原则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%86%E9%85%8D%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">分配算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%85%88%E8%AF%B7%E6%B1%82%E5%85%88%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">先请求先服务</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8C%89%E8%BF%9B%E7%A8%8B%E4%BC%98%E5%85%88%E6%9D%83%E7%A1%AE%E5%AE%9A%E6%9C%8D%E5%8A%A1%E6%AC%A1%E5%BA%8F\"><span class=\"toc-text\">按进程优先权确定服务次序</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8A%E5%B1%82%E7%BB%9F%E4%B8%80%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">上层统一接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">实现思路</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E5%A4%87%E7%9A%84%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">设备的命名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%86%B2%E5%8C%BA%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">缓冲区管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%86%B2%E6%8E%A7%E5%88%B6%E5%9D%97buf\"><span class=\"toc-text\">缓冲控制块buf</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#buf%E9%98%9F%E5%88%97\"><span class=\"toc-text\">buf队列</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%86%B2%E5%8C%BA%E4%B9%8B%E9%97%B4%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">&#x3D;&#x3D;缓冲区之间关系&#x3D;&#x3D;</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%A1%E7%90%86%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">管理算法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">字符设备管理</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#linux%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">Linux设备管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">接口管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">驱动程序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87\"><span class=\"toc-text\">字符设备</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9D%97%E8%AE%BE%E5%A4%87\"><span class=\"toc-text\">块设备</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C\"><span class=\"toc-text\">网络</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%81%97%E7%95%99%E4%BD%9C%E4%B8%9A\"><span class=\"toc-text\">遗留作业</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%AE%BA\"><span class=\"toc-text\">概论</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A3%81%E7%9B%98%E8%B0%83%E5%BA%A6-1\"><span class=\"toc-text\">磁盘调度</span></a></li></ol></li></ol>","author":{"name":"sensuschung","slug":"blog-author","avatar":"/img/avator_1.jpg","link":"/","description":"日常/笔记/日记等","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"NIS2336","uid":"ca59df81d26b019565ef81d82c38a865","slug":"NIS2336","date":"2024-06-02T14:16:00.000Z","updated":"2024-06-18T15:30:34.319Z","comments":true,"path":"api/articles/NIS2336.json","keywords":null,"cover":[],"text":"概论 概念 翻译程序：源语言、源程序、目标语言、目标程序 编译程序 编译的两大（编译和运行)/三大阶段(编译、汇编和运行）及区别（编译阶段生成的目标程序） 解释...","permalink":"/post/NIS2336","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"study","slug":"study","count":5,"path":"api/categories/study.json"},{"name":"class","slug":"study/class","count":3,"path":"api/categories/study/class.json"}],"tags":[{"name":"review","slug":"review","count":3,"path":"api/tags/review.json"},{"name":"2023-2024Spring","slug":"2023-2024Spring","count":3,"path":"api/tags/2023-2024Spring.json"},{"name":"compiling","slug":"compiling","count":1,"path":"api/tags/compiling.json"}],"author":{"name":"sensuschung","slug":"blog-author","avatar":"/img/avator_1.jpg","link":"/","description":"日常/笔记/日记等","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2024-05-26T02:19:19.000Z","updated":"2024-05-26T09:16:45.824Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info...","permalink":"/post/hello-world","photos":[],"count_time":{"symbolsCount":463,"symbolsTime":"1 mins."},"categories":[{"name":"others","slug":"others","count":1,"path":"api/categories/others.json"}],"tags":[{"name":"test","slug":"test","count":1,"path":"api/tags/test.json"}],"author":{"name":"sensuschung","slug":"blog-author","avatar":"/img/avator_1.jpg","link":"/","description":"日常/笔记/日记等","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}